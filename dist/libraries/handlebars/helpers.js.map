{"version":3,"sources":["../../../src/libraries/handlebars/helpers.ts"],"sourcesContent":["import type { SerializedEditorState } from 'lexical'\n\nimport { getFieldInfo } from '../../utilities/getFieldInfo.js'\nimport { lexicalToHTML } from '../../utilities/lexicalToHTML.js'\nimport { asyncHandlebars } from './asyncHandlebars.js'\nimport { handlebarsHelpersMap } from './helpersMap.js'\n\nexport const registerEditorHelper = (payload: any, schemaPath: string) => {\n  //TODO: add autocomplete ability using handlebars template on PromptEditorField and include custom helpers in dropdown\n\n  let fieldInfo = getFieldInfo(payload.collections, schemaPath)\n  const schemaPathChunks = schemaPath.split('.')\n\n  asyncHandlebars.registerHelper(\n    handlebarsHelpersMap.toHTML.name,\n    async function (content: SerializedEditorState, options: any) {\n      const collectionSlug = schemaPathChunks[0]\n      const { ids } = options\n      for (const id of ids) {\n        //TODO: Find a better way to get schemaPath of defined field in prompt editor\n        const path = `${collectionSlug}.${id}`\n        fieldInfo = getFieldInfo(payload.collections, path)\n      }\n\n      let html = ''\n      if (\n        fieldInfo &&\n        'editor' in fieldInfo &&\n        fieldInfo.editor &&\n        typeof fieldInfo.editor === 'object' &&\n        'editorConfig' in fieldInfo.editor &&\n        fieldInfo.editor.editorConfig\n      ) {\n        if (\n          fieldInfo.editor.editorConfig &&\n          typeof fieldInfo.editor.editorConfig === 'object' &&\n          'features' in fieldInfo.editor.editorConfig &&\n          'lexical' in fieldInfo.editor.editorConfig &&\n          'resolvedFeatureMap' in fieldInfo.editor.editorConfig\n        ) {\n          html = await lexicalToHTML(\n            content,\n            fieldInfo.editor.editorConfig as any, // as SanitizedServerEditorConfig\n          )\n        }\n      }\n      return new asyncHandlebars.SafeString(html)\n    },\n  )\n}\n"],"names":["getFieldInfo","lexicalToHTML","asyncHandlebars","handlebarsHelpersMap","registerEditorHelper","payload","schemaPath","fieldInfo","collections","schemaPathChunks","split","registerHelper","toHTML","name","content","options","collectionSlug","ids","id","path","html","editor","editorConfig","SafeString"],"mappings":"AAEA,SAASA,YAAY,QAAQ,kCAAiC;AAC9D,SAASC,aAAa,QAAQ,mCAAkC;AAChE,SAASC,eAAe,QAAQ,uBAAsB;AACtD,SAASC,oBAAoB,QAAQ,kBAAiB;AAEtD,OAAO,MAAMC,uBAAuB,CAACC,SAAcC;IACjD,sHAAsH;IAEtH,IAAIC,YAAYP,aAAaK,QAAQG,WAAW,EAAEF;IAClD,MAAMG,mBAAmBH,WAAWI,KAAK,CAAC;IAE1CR,gBAAgBS,cAAc,CAC5BR,qBAAqBS,MAAM,CAACC,IAAI,EAChC,eAAgBC,OAA8B,EAAEC,OAAY;QAC1D,MAAMC,iBAAiBP,gBAAgB,CAAC,EAAE;QAC1C,MAAM,EAAEQ,GAAG,EAAE,GAAGF;QAChB,KAAK,MAAMG,MAAMD,IAAK;YACpB,6EAA6E;YAC7E,MAAME,OAAO,GAAGH,eAAe,CAAC,EAAEE,IAAI;YACtCX,YAAYP,aAAaK,QAAQG,WAAW,EAAEW;QAChD;QAEA,IAAIC,OAAO;QACX,IACEb,aACA,YAAYA,aACZA,UAAUc,MAAM,IAChB,OAAOd,UAAUc,MAAM,KAAK,YAC5B,kBAAkBd,UAAUc,MAAM,IAClCd,UAAUc,MAAM,CAACC,YAAY,EAC7B;YACA,IACEf,UAAUc,MAAM,CAACC,YAAY,IAC7B,OAAOf,UAAUc,MAAM,CAACC,YAAY,KAAK,YACzC,cAAcf,UAAUc,MAAM,CAACC,YAAY,IAC3C,aAAaf,UAAUc,MAAM,CAACC,YAAY,IAC1C,wBAAwBf,UAAUc,MAAM,CAACC,YAAY,EACrD;gBACAF,OAAO,MAAMnB,cACXa,SACAP,UAAUc,MAAM,CAACC,YAAY;YAEjC;QACF;QACA,OAAO,IAAIpB,gBAAgBqB,UAAU,CAACH;IACxC;AAEJ,EAAC"}