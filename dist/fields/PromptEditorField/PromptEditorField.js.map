{"version":3,"sources":["../../../src/fields/PromptEditorField/PromptEditorField.tsx"],"sourcesContent":["'use client'\n\nimport type { TextareaFieldProps } from '@payloadcms/ui'\n\nimport { TextareaField as InputField, useField, useFieldProps, useForm } from '@payloadcms/ui'\nimport React, { useCallback, useEffect, useRef } from 'react'\n\nimport { useInstructions } from '../../providers/InstructionsProvider/hook.js'\nimport { Floatype } from '../../ui/Floatype/Floatype.js'\n\n//TODO: Display the handlebarjs tips in description\nexport const PromptEditorField: React.FC<TextareaFieldProps> = (props) => {\n  const { name, path: pathFromProps, ...restProps } = props\n  const { path: pathFromContext } = useFieldProps()\n\n  const elementRef = useRef<HTMLTextAreaElement>(null)\n  const { fields } = useInstructions({\n    path: pathFromProps,\n  })\n\n  const { path, setValue } = useField<string>({\n    path: pathFromContext || pathFromProps || name,\n  })\n\n  const { formRef, initializing } = useForm()\n\n  useEffect(() => {\n    if (!formRef.current || elementRef.current) return\n\n    const fieldId = `#field-${path.replace(/\\./g, '__')}`\n    elementRef.current = formRef.current.querySelector(fieldId)\n  }, [formRef, path])\n\n  const handleQuery = useCallback(\n    (val: string) => {\n      if (val === '{{ ') return fields\n      return fields.filter((field) => field.toLowerCase().includes(val.toLowerCase()))\n    },\n    [fields],\n  )\n\n  const handleSelect = useCallback(\n    (value: string, query: string) => {\n      if (query === '{{ ') return `${value} }}`\n      return fields.includes(value) ? value : undefined\n    },\n    [fields],\n  )\n\n  const handleUpdate = useCallback(\n    (value: string) => {\n      if (value) setValue(value)\n    },\n    [setValue],\n  )\n\n  const CustomDescription = !initializing ? (\n    <Floatype\n      options={{\n        onQuery: handleQuery,\n        onSelect: handleSelect,\n        onUpdate: handleUpdate,\n      }}\n      ref={elementRef}\n    />\n  ) : null\n\n  return (\n    <InputField\n      {...restProps}\n      CustomDescription={CustomDescription}\n      name={name}\n      path={pathFromProps}\n    />\n  )\n}\n"],"names":["TextareaField","InputField","useField","useFieldProps","useForm","React","useCallback","useEffect","useRef","useInstructions","Floatype","PromptEditorField","props","name","path","pathFromProps","restProps","pathFromContext","elementRef","fields","setValue","formRef","initializing","current","fieldId","replace","querySelector","handleQuery","val","filter","field","toLowerCase","includes","handleSelect","value","query","undefined","handleUpdate","CustomDescription","options","onQuery","onSelect","onUpdate","ref"],"mappings":"AAAA;;AAIA,SAASA,iBAAiBC,UAAU,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,OAAO,QAAQ,iBAAgB;AAC9F,OAAOC,SAASC,WAAW,EAAEC,SAAS,EAAEC,MAAM,QAAQ,QAAO;AAE7D,SAASC,eAAe,QAAQ,+CAA8C;AAC9E,SAASC,QAAQ,QAAQ,gCAA+B;AAExD,mDAAmD;AACnD,OAAO,MAAMC,oBAAkD,CAACC;IAC9D,MAAM,EAAEC,IAAI,EAAEC,MAAMC,aAAa,EAAE,GAAGC,WAAW,GAAGJ;IACpD,MAAM,EAAEE,MAAMG,eAAe,EAAE,GAAGd;IAElC,MAAMe,aAAaV,OAA4B;IAC/C,MAAM,EAAEW,MAAM,EAAE,GAAGV,gBAAgB;QACjCK,MAAMC;IACR;IAEA,MAAM,EAAED,IAAI,EAAEM,QAAQ,EAAE,GAAGlB,SAAiB;QAC1CY,MAAMG,mBAAmBF,iBAAiBF;IAC5C;IAEA,MAAM,EAAEQ,OAAO,EAAEC,YAAY,EAAE,GAAGlB;IAElCG,UAAU;QACR,IAAI,CAACc,QAAQE,OAAO,IAAIL,WAAWK,OAAO,EAAE;QAE5C,MAAMC,UAAU,CAAC,OAAO,EAAEV,KAAKW,OAAO,CAAC,OAAO,MAAM,CAAC;QACrDP,WAAWK,OAAO,GAAGF,QAAQE,OAAO,CAACG,aAAa,CAACF;IACrD,GAAG;QAACH;QAASP;KAAK;IAElB,MAAMa,cAAcrB,YAClB,CAACsB;QACC,IAAIA,QAAQ,OAAO,OAAOT;QAC1B,OAAOA,OAAOU,MAAM,CAAC,CAACC,QAAUA,MAAMC,WAAW,GAAGC,QAAQ,CAACJ,IAAIG,WAAW;IAC9E,GACA;QAACZ;KAAO;IAGV,MAAMc,eAAe3B,YACnB,CAAC4B,OAAeC;QACd,IAAIA,UAAU,OAAO,OAAO,CAAC,EAAED,MAAM,GAAG,CAAC;QACzC,OAAOf,OAAOa,QAAQ,CAACE,SAASA,QAAQE;IAC1C,GACA;QAACjB;KAAO;IAGV,MAAMkB,eAAe/B,YACnB,CAAC4B;QACC,IAAIA,OAAOd,SAASc;IACtB,GACA;QAACd;KAAS;IAGZ,MAAMkB,oBAAoB,CAAChB,6BACzB,KAACZ;QACC6B,SAAS;YACPC,SAASb;YACTc,UAAUR;YACVS,UAAUL;QACZ;QACAM,KAAKzB;SAEL;IAEJ,qBACE,KAACjB;QACE,GAAGe,SAAS;QACbsB,mBAAmBA;QACnBzB,MAAMA;QACNC,MAAMC;;AAGZ,EAAC"}