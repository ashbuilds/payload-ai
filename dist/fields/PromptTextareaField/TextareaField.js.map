{"version":3,"sources":["../../../src/fields/PromptTextareaField/TextareaField.tsx"],"sourcesContent":["'use client'\n\nimport type { TextareaFieldProps } from '@payloadcms/ui'\n\nimport { TextareaField as InputField, useField, useFieldProps, useForm } from '@payloadcms/ui'\nimport React, { useContext, useEffect, useRef } from 'react'\n\nimport { PromptContext } from '../../providers/Prompt/index.js'\nimport { Floatype } from '../../ui/Floatype/Floatype.js'\n\nexport const PromptTextareaField = (props: TextareaFieldProps) => {\n  const { name, path: pathFromProps } = props\n  const { path: pathFromContext } = useFieldProps()\n\n  const { path, setValue } = useField<string>({\n    path: pathFromContext || pathFromProps || name,\n  })\n  const formInfo = useForm()\n  const { formRef } = formInfo\n  const fieldsInfo = useContext(PromptContext)\n  const elementRef = useRef<any>(null)\n\n  useEffect(() => {\n    if (!formRef.current || elementRef.current) {\n      return\n    }\n\n    const fieldId = `#field-${path.replace(/\\./g, '__')}`\n    const textareaElement = formRef.current.querySelector(fieldId)\n    if (textareaElement) {\n      elementRef.current = textareaElement\n    }\n  }, [formRef, path, fieldsInfo, elementRef])\n\n  return (\n    <React.Fragment>\n      <Floatype\n        inputRef={elementRef}\n        options={{\n          onQuery: (val) => {\n            const filteredItems = fieldsInfo.fields.filter((field) => {\n              return field.toLowerCase().includes(val.toLowerCase())\n            })\n\n            if (val === '{{ ') {\n              return fieldsInfo.fields\n            }\n\n            return filteredItems\n          },\n          onSelect: (value, query) => {\n            if (query === '{{ ') {\n              return `${value} }}`\n            }\n\n            if (fieldsInfo.fields.includes(value)) {\n              return value\n            }\n          },\n          onUpdate: (value) => {\n            if (value) {\n              setValue(value)\n            }\n          },\n        }}\n      />\n      <InputField {...props} />\n    </React.Fragment>\n  )\n}\n"],"names":["TextareaField","InputField","useField","useFieldProps","useForm","React","useContext","useEffect","useRef","PromptContext","Floatype","PromptTextareaField","props","name","path","pathFromProps","pathFromContext","setValue","formInfo","formRef","fieldsInfo","elementRef","current","fieldId","replace","textareaElement","querySelector","Fragment","inputRef","options","onQuery","val","filteredItems","fields","filter","field","toLowerCase","includes","onSelect","value","query","onUpdate"],"mappings":"AAAA;;AAIA,SAASA,iBAAiBC,UAAU,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,OAAO,QAAQ,iBAAgB;AAC9F,OAAOC,SAASC,UAAU,EAAEC,SAAS,EAAEC,MAAM,QAAQ,QAAO;AAE5D,SAASC,aAAa,QAAQ,kCAAiC;AAC/D,SAASC,QAAQ,QAAQ,gCAA+B;AAExD,OAAO,MAAMC,sBAAsB,CAACC;IAClC,MAAM,EAAEC,IAAI,EAAEC,MAAMC,aAAa,EAAE,GAAGH;IACtC,MAAM,EAAEE,MAAME,eAAe,EAAE,GAAGb;IAElC,MAAM,EAAEW,IAAI,EAAEG,QAAQ,EAAE,GAAGf,SAAiB;QAC1CY,MAAME,mBAAmBD,iBAAiBF;IAC5C;IACA,MAAMK,WAAWd;IACjB,MAAM,EAAEe,OAAO,EAAE,GAAGD;IACpB,MAAME,aAAad,WAAWG;IAC9B,MAAMY,aAAab,OAAY;IAE/BD,UAAU;QACR,IAAI,CAACY,QAAQG,OAAO,IAAID,WAAWC,OAAO,EAAE;YAC1C;QACF;QAEA,MAAMC,UAAU,CAAC,OAAO,EAAET,KAAKU,OAAO,CAAC,OAAO,MAAM,CAAC;QACrD,MAAMC,kBAAkBN,QAAQG,OAAO,CAACI,aAAa,CAACH;QACtD,IAAIE,iBAAiB;YACnBJ,WAAWC,OAAO,GAAGG;QACvB;IACF,GAAG;QAACN;QAASL;QAAMM;QAAYC;KAAW;IAE1C,qBACE,MAAChB,MAAMsB,QAAQ;;0BACb,KAACjB;gBACCkB,UAAUP;gBACVQ,SAAS;oBACPC,SAAS,CAACC;wBACR,MAAMC,gBAAgBZ,WAAWa,MAAM,CAACC,MAAM,CAAC,CAACC;4BAC9C,OAAOA,MAAMC,WAAW,GAAGC,QAAQ,CAACN,IAAIK,WAAW;wBACrD;wBAEA,IAAIL,QAAQ,OAAO;4BACjB,OAAOX,WAAWa,MAAM;wBAC1B;wBAEA,OAAOD;oBACT;oBACAM,UAAU,CAACC,OAAOC;wBAChB,IAAIA,UAAU,OAAO;4BACnB,OAAO,CAAC,EAAED,MAAM,GAAG,CAAC;wBACtB;wBAEA,IAAInB,WAAWa,MAAM,CAACI,QAAQ,CAACE,QAAQ;4BACrC,OAAOA;wBACT;oBACF;oBACAE,UAAU,CAACF;wBACT,IAAIA,OAAO;4BACTtB,SAASsB;wBACX;oBACF;gBACF;;0BAEF,KAACtC;gBAAY,GAAGW,KAAK;;;;AAG3B,EAAC"}