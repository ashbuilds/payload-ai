{"version":3,"sources":["../../../src/fields/SelectField/SelectField.tsx"],"sourcesContent":["'use client'\n\nimport type { OptionObject, SelectFieldClientProps } from 'payload'\n\nimport { SelectInput, useField } from '@payloadcms/ui'\nimport React, { useEffect, useState } from 'react'\n\n// Use to filter model options in settings based on field types\nexport const SelectField = (\n  props: {\n    filterByField: string\n    options: { fields: string[]; label: string; value: string }[]\n    path: string\n  } & SelectFieldClientProps,\n) => {\n  const { field, filterByField, options, path } = props\n  const { value: relatedField } = useField<string>({\n    path: filterByField,\n  })\n\n  const [filterOptions, setFilterOptions] = useState<OptionObject[]>([])\n\n  useEffect(() => {\n    if (!Array.isArray(options)) {\n      return\n    }\n\n    const opts = options.filter((option) => {\n      if (!relatedField || !option.fields) {\n        return true\n      }\n\n      if (Array.isArray(option.fields)) {\n        return option.fields.includes(relatedField)\n      }\n    })\n    setFilterOptions(opts)\n  }, [relatedField, options])\n\n  const { setValue, value: selectValue } = useField<string>({ path })\n\n  return (\n    <SelectInput\n      label={field.label}\n      name={path}\n      onChange={(value) => {\n        console.log(\"value --- \", value)\n        if (Array.isArray(value)) {\n          setValue(value[0]?.value ?? '')\n        } else if (value && typeof value === 'object' && 'value' in value) {\n          setValue((value as OptionObject).value)\n        } else {\n          setValue('')\n        }\n      }}\n      options={filterOptions}\n      path={path}\n      value={selectValue}\n    />\n  )\n}\n"],"names":["SelectInput","useField","React","useEffect","useState","SelectField","props","field","filterByField","options","path","value","relatedField","filterOptions","setFilterOptions","Array","isArray","opts","filter","option","fields","includes","setValue","selectValue","label","name","onChange","console","log"],"mappings":"AAAA;;AAIA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,iBAAgB;AACtD,OAAOC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,QAAO;AAElD,+DAA+D;AAC/D,OAAO,MAAMC,cAAc,CACzBC;IAMA,MAAM,EAAEC,KAAK,EAAEC,aAAa,EAAEC,OAAO,EAAEC,IAAI,EAAE,GAAGJ;IAChD,MAAM,EAAEK,OAAOC,YAAY,EAAE,GAAGX,SAAiB;QAC/CS,MAAMF;IACR;IAEA,MAAM,CAACK,eAAeC,iBAAiB,GAAGV,SAAyB,EAAE;IAErED,UAAU;QACR,IAAI,CAACY,MAAMC,OAAO,CAACP,UAAU;YAC3B;QACF;QAEA,MAAMQ,OAAOR,QAAQS,MAAM,CAAC,CAACC;YAC3B,IAAI,CAACP,gBAAgB,CAACO,OAAOC,MAAM,EAAE;gBACnC,OAAO;YACT;YAEA,IAAIL,MAAMC,OAAO,CAACG,OAAOC,MAAM,GAAG;gBAChC,OAAOD,OAAOC,MAAM,CAACC,QAAQ,CAACT;YAChC;QACF;QACAE,iBAAiBG;IACnB,GAAG;QAACL;QAAcH;KAAQ;IAE1B,MAAM,EAAEa,QAAQ,EAAEX,OAAOY,WAAW,EAAE,GAAGtB,SAAiB;QAAES;IAAK;IAEjE,qBACE,KAACV;QACCwB,OAAOjB,MAAMiB,KAAK;QAClBC,MAAMf;QACNgB,UAAU,CAACf;YACTgB,QAAQC,GAAG,CAAC,cAAcjB;YAC1B,IAAII,MAAMC,OAAO,CAACL,QAAQ;gBACxBW,SAASX,KAAK,CAAC,EAAE,EAAEA,SAAS;YAC9B,OAAO,IAAIA,SAAS,OAAOA,UAAU,YAAY,WAAWA,OAAO;gBACjEW,SAAS,AAACX,MAAuBA,KAAK;YACxC,OAAO;gBACLW,SAAS;YACX;QACF;QACAb,SAASI;QACTH,MAAMA;QACNC,OAAOY;;AAGb,EAAC"}