{"version":3,"sources":["../../src/utilities/useDotFields.ts"],"sourcesContent":["import { useFieldProps, useForm } from '@payloadcms/ui'\nimport dot from 'dot-object'\nimport { useCallback, useEffect, useState } from 'react'\n\nimport { arraysHaveSameStrings } from './arraysHaveSameStrings.js'\n\ninterface DotFields {\n  dotFields: Record<string, unknown>\n  fields: Record<string, unknown>\n  getDotFields: () => Record<string, unknown>\n}\n\n// TODO: Refactor this to be a generic way of getting merged data of sibling fields and its keys with dot notation\nexport const useDotFields = (): DotFields => {\n  const { getData, getFields, getSiblingData } = useForm()\n  const { path } = useFieldProps()\n\n  const [fieldsInfo, setFieldsInfo] = useState<DotFields>({\n    dotFields: null,\n    fields: null,\n    getDotFields: () => ({}),\n  })\n\n  const getDotFields = useCallback((): {\n    dotFields: Record<string, unknown>\n    fields: Record<string, unknown>\n  } => {\n    if (typeof getData !== 'function') return { dotFields: {}, fields: {} }\n\n    const data = getData()\n    const siblingData = getSiblingData(path)\n    // console.log('siblingData: ', siblingData)\n    const dataDot = dot.dot(data)\n    const siblingDataDot = dot.dot(siblingData)\n\n    if (arraysHaveSameStrings(Object.keys(dataDot), Object.keys(siblingDataDot))) {\n      return {\n        dotFields: { ...dataDot },\n        fields: { ...data },\n      }\n    } else {\n      const siblingDataDot = dot.dot({ sibling: siblingData })\n      return {\n        dotFields: { ...dataDot, ...siblingDataDot },\n        fields: { ...data, sibling: siblingData },\n      }\n    }\n  }, [getFields, getSiblingData, path, getData, fieldsInfo])\n\n  useEffect(() => {\n    if (fieldsInfo.dotFields) {\n      return\n    }\n\n    const updatedFields = getDotFields()\n    setFieldsInfo({\n      dotFields: updatedFields.dotFields,\n      fields: updatedFields.fields,\n      getDotFields,\n    })\n  }, [getDotFields, fieldsInfo])\n\n  return { ...fieldsInfo, getDotFields }\n}\n"],"names":["useFieldProps","useForm","dot","useCallback","useEffect","useState","arraysHaveSameStrings","useDotFields","getData","getFields","getSiblingData","path","fieldsInfo","setFieldsInfo","dotFields","fields","getDotFields","data","siblingData","dataDot","siblingDataDot","Object","keys","sibling","updatedFields"],"mappings":"AAAA,SAASA,aAAa,EAAEC,OAAO,QAAQ,iBAAgB;AACvD,OAAOC,SAAS,aAAY;AAC5B,SAASC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,QAAO;AAExD,SAASC,qBAAqB,QAAQ,6BAA4B;AAQlE,kHAAkH;AAClH,OAAO,MAAMC,eAAe;IAC1B,MAAM,EAAEC,OAAO,EAAEC,SAAS,EAAEC,cAAc,EAAE,GAAGT;IAC/C,MAAM,EAAEU,IAAI,EAAE,GAAGX;IAEjB,MAAM,CAACY,YAAYC,cAAc,GAAGR,SAAoB;QACtDS,WAAW;QACXC,QAAQ;QACRC,cAAc,IAAO,CAAA,CAAC,CAAA;IACxB;IAEA,MAAMA,eAAeb,YAAY;QAI/B,IAAI,OAAOK,YAAY,YAAY,OAAO;YAAEM,WAAW,CAAC;YAAGC,QAAQ,CAAC;QAAE;QAEtE,MAAME,OAAOT;QACb,MAAMU,cAAcR,eAAeC;QACnC,4CAA4C;QAC5C,MAAMQ,UAAUjB,IAAIA,GAAG,CAACe;QACxB,MAAMG,iBAAiBlB,IAAIA,GAAG,CAACgB;QAE/B,IAAIZ,sBAAsBe,OAAOC,IAAI,CAACH,UAAUE,OAAOC,IAAI,CAACF,kBAAkB;YAC5E,OAAO;gBACLN,WAAW;oBAAE,GAAGK,OAAO;gBAAC;gBACxBJ,QAAQ;oBAAE,GAAGE,IAAI;gBAAC;YACpB;QACF,OAAO;YACL,MAAMG,iBAAiBlB,IAAIA,GAAG,CAAC;gBAAEqB,SAASL;YAAY;YACtD,OAAO;gBACLJ,WAAW;oBAAE,GAAGK,OAAO;oBAAE,GAAGC,cAAc;gBAAC;gBAC3CL,QAAQ;oBAAE,GAAGE,IAAI;oBAAEM,SAASL;gBAAY;YAC1C;QACF;IACF,GAAG;QAACT;QAAWC;QAAgBC;QAAMH;QAASI;KAAW;IAEzDR,UAAU;QACR,IAAIQ,WAAWE,SAAS,EAAE;YACxB;QACF;QAEA,MAAMU,gBAAgBR;QACtBH,cAAc;YACZC,WAAWU,cAAcV,SAAS;YAClCC,QAAQS,cAAcT,MAAM;YAC5BC;QACF;IACF,GAAG;QAACA;QAAcJ;KAAW;IAE7B,OAAO;QAAE,GAAGA,UAAU;QAAEI;IAAa;AACvC,EAAC"}