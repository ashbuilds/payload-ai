{"version":3,"sources":["../../src/utilities/useGenerate.ts"],"sourcesContent":["import {\n  useConfig,\n  useDocumentEvents,\n  useDocumentInfo,\n  useField,\n  useFieldProps,\n  useForm,\n  useLocale,\n} from '@payloadcms/ui'\nimport { useCallback, useEffect } from 'react'\n\nimport { GenerateTextarea, MenuItems } from '../types.js'\n\nimport { useInstructions } from '../providers/InstructionsProvider/index.js'\nimport { useDotFields } from './useDotFields.js'\nimport { DocumentSchema } from '../ai/RichTextSchema.js'\n\nimport { experimental_useObject as useObject, useCompletion } from 'ai/react'\nimport { $getRoot, LexicalEditor } from 'lexical'\nimport { useMenu } from '../ui/Actions/useMenu.js'\n\ntype Generate = (options: { action: MenuItems }) => Promise<void | Response>\n\ntype UseGenerate = {\n  lexicalEditor: LexicalEditor\n}\n\nexport const useGenerate = ({ lexicalEditor }: UseGenerate) => {\n  const { type, path: pathFromContext, schemaPath } = useFieldProps()\n\n  //TODO: This should be dynamic, i think it was the part of component props but its not inside useFieldProps\n  const relationTo = 'media'\n\n  const { setValue, value, ...restFieldInfo } = useField<string>({\n    path: pathFromContext,\n  })\n\n  const { id: instructionId } = useInstructions({\n    path: schemaPath,\n  })\n\n  const localFromContext = useLocale()\n  const { getDotFields } = useDotFields()\n\n  const { object, submit } = useObject({\n    api: '/api/ai/generate/textarea',\n    schema: DocumentSchema,\n    onError: (error) => {\n      console.error('Error generating object:', error)\n    },\n  })\n\n  const { complete, completion } = useCompletion({\n    api: '/api/ai/generate/textarea',\n    streamMode: 'stream-data',\n    onError: (error) => {\n      console.error('Error generating text:', error)\n    },\n  })\n\n  useEffect(() => {\n    if (!object) return\n\n    requestAnimationFrame(() => {\n      try {\n        const editorState = lexicalEditor.parseEditorState(JSON.stringify(object))\n        if (editorState.isEmpty()) return\n\n        lexicalEditor.update(\n          () => {\n            const root = $getRoot()\n            root.clear() //TODO: this is hack to prevent reconciliation error - find a way\n            lexicalEditor.setEditorState(editorState)\n          },\n          {\n            discrete: true,\n          },\n        )\n      } catch (e) {\n        setValue(object)\n      }\n    })\n  }, [object])\n\n  useEffect(() => {\n    if (!completion) return\n\n    requestAnimationFrame(() => {\n      setValue(completion)\n    })\n  }, [completion])\n\n  const streamObject = useCallback(\n    async ({ action = 'Compose' }: { action: MenuItems }) => {\n      const { fields = {} } = getDotFields()\n      const options = {\n        instructionId,\n        action,\n      }\n\n      console.log('Streaming object with options: ', options)\n\n      submit({\n        doc: fields,\n        locale: localFromContext?.code,\n        options: options,\n      })\n    },\n    [getDotFields, localFromContext?.code, instructionId],\n  )\n\n  const streamText = useCallback(\n    async ({ action = 'Compose' }: { action: MenuItems }) => {\n      const { fields = {} } = getDotFields()\n      const options = {\n        instructionId,\n        action,\n      }\n\n      console.log('Streaming text with options: ', options)\n\n      await complete('', {\n        body: {\n          doc: fields,\n          locale: localFromContext?.code,\n          options: options,\n        },\n      })\n    },\n    [getDotFields, localFromContext?.code, instructionId],\n  )\n\n  const generateUpload = useCallback(async () => {\n    const { fields = {} } = getDotFields()\n    if (!Object.keys(fields).length) {\n      console.log('dotFields is empty')\n      return\n    }\n\n    return fetch('/api/ai/generate/upload', {\n      body: JSON.stringify({\n        doc: fields,\n        locale: localFromContext?.code,\n        options: {\n          instructionId,\n          uploadCollectionSlug: relationTo,\n        },\n      } satisfies Parameters<GenerateTextarea>[0]),\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      method: 'POST',\n    })\n      .then(async (generatedImageResponse) => {\n        if (generatedImageResponse.ok) {\n          const { result: generatedImage } = await generatedImageResponse.json()\n          setValue(generatedImage?.id)\n        } else {\n          const { errors = [] } = await generatedImageResponse.json()\n          const errStr = errors.map((error) => error.message).join(', ')\n          throw new Error(errStr)\n        }\n        return generatedImageResponse\n      })\n      .catch((error) => {\n        console.error('Error generating image', error)\n      })\n  }, [getDotFields, localFromContext?.code, instructionId, relationTo, setValue])\n\n  return useCallback(\n    async (options?: { action: MenuItems }) => {\n      if (type === 'richText') {\n        return streamObject(options)\n      }\n\n      if (['text', 'textarea'].includes(type)) {\n        return streamText(options)\n      }\n      if (type === 'upload') {\n        return generateUpload()\n      }\n    },\n    [generateUpload, streamObject, streamText, type],\n  )\n\n  // return async (options?: { action: MenuItems }) => {\n  //   if (type === 'richText') {\n  //     return streamObject(options)\n  //   }\n  //\n  //   if (['text', 'textarea'].includes(type)) {\n  //     return streamText(options)\n  //   }\n  //   if (type === 'upload') {\n  //     return generateUpload()\n  //   }\n  // }\n}\n"],"names":["useField","useFieldProps","useLocale","useCallback","useEffect","useInstructions","useDotFields","DocumentSchema","experimental_useObject","useObject","useCompletion","$getRoot","useGenerate","lexicalEditor","type","path","pathFromContext","schemaPath","relationTo","setValue","value","restFieldInfo","id","instructionId","localFromContext","getDotFields","object","submit","api","schema","onError","error","console","complete","completion","streamMode","requestAnimationFrame","editorState","parseEditorState","JSON","stringify","isEmpty","update","root","clear","setEditorState","discrete","e","streamObject","action","fields","options","log","doc","locale","code","streamText","body","generateUpload","Object","keys","length","fetch","uploadCollectionSlug","credentials","headers","method","then","generatedImageResponse","ok","result","generatedImage","json","errors","errStr","map","message","join","Error","catch","includes"],"mappings":"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"}