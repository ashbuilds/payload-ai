{"version":3,"sources":["../../src/utilities/updateFieldsConfig.ts"],"sourcesContent":["import type {\n  CollectionConfig,\n  Description,\n  DescriptionComponent,\n  FieldDescriptionProps,\n  ServerProps,\n} from 'payload'\n\nimport { DescriptionField } from '../fields/DescriptionField/DescriptionField.js'\nimport { ComponentClass } from 'react'\n\ninterface UpdateFieldsConfig {\n  schemaPathMap: Record<string, string>\n  updatedCollectionConfig: CollectionConfig\n}\n\nexport const updateFieldsConfig = (collectionConfig: CollectionConfig): UpdateFieldsConfig => {\n  let schemaPathMap = {}\n  function updateField(field: any, parentPath = ''): any {\n    const currentPath = parentPath ? `${parentPath}.${field.name}` : field.name\n    const currentSchemaPath = `${collectionConfig.slug}.${currentPath}`\n\n    if (field.admin?.disabled || field.admin?.readOnly || field.admin?.hidden) {\n      return field\n    }\n\n    // Map field path for global fieldInstructionsMap to load related instructions\n    // This is done due to save extra API call to get instructions when Field components are loaded in admin\n    // Doing is will only call instructions data when user clicks on settings\n    if (['richText', 'text', 'textarea', 'upload'].includes(field.type)) {\n      schemaPathMap = {\n        ...schemaPathMap,\n        [currentSchemaPath]: field.type,\n      }\n    }\n\n    // Inject AI actions, richText is not included here as it has to be explicitly defined by user\n    if (['text', 'textarea', 'upload'].includes(field.type)) {\n      return {\n        ...field,\n        admin: {\n          ...field.admin,\n          components: {\n            ...field.admin?.components,\n            // @ts-ignore\n            Description: DescriptionField({\n              Description: field.admin?.components?.Description,\n            }),\n          },\n        },\n      }\n    }\n\n    if (field.fields) {\n      return {\n        ...field,\n        fields: field.fields.map((subField: any) => updateField(subField, currentPath)),\n      }\n    }\n\n    if (field.tabs) {\n      return {\n        ...field,\n        tabs: field.tabs.map((tab: any) => ({\n          ...tab,\n          fields: tab.fields.map((subField: any) => updateField(subField, currentPath)),\n        })),\n      }\n    }\n\n    if (field.blocks) {\n      return {\n        ...field,\n        blocks: field.blocks.map((block: any) => ({\n          ...block,\n          fields: block.fields.map((subField: any) =>\n            updateField(subField, `${currentPath}.${block.slug}`),\n          ),\n        })),\n      }\n    }\n\n    return field\n  }\n\n  const updatedCollectionConfig = {\n    ...collectionConfig,\n    fields: collectionConfig.fields.map((field) => updateField(field)),\n  }\n\n  return {\n    schemaPathMap,\n    updatedCollectionConfig,\n  }\n}\n"],"names":["DescriptionField","updateFieldsConfig","collectionConfig","schemaPathMap","updateField","field","parentPath","currentPath","name","currentSchemaPath","slug","admin","disabled","readOnly","hidden","includes","type","components","Description","fields","map","subField","tabs","tab","blocks","block","updatedCollectionConfig"],"mappings":"AAQA,SAASA,gBAAgB,QAAQ,iDAAgD;AAQjF,OAAO,MAAMC,qBAAqB,CAACC;IACjC,IAAIC,gBAAgB,CAAC;IACrB,SAASC,YAAYC,KAAU,EAAEC,aAAa,EAAE;QAC9C,MAAMC,cAAcD,aAAa,CAAC,EAAEA,WAAW,CAAC,EAAED,MAAMG,IAAI,CAAC,CAAC,GAAGH,MAAMG,IAAI;QAC3E,MAAMC,oBAAoB,CAAC,EAAEP,iBAAiBQ,IAAI,CAAC,CAAC,EAAEH,YAAY,CAAC;QAEnE,IAAIF,MAAMM,KAAK,EAAEC,YAAYP,MAAMM,KAAK,EAAEE,YAAYR,MAAMM,KAAK,EAAEG,QAAQ;YACzE,OAAOT;QACT;QAEA,8EAA8E;QAC9E,wGAAwG;QACxG,yEAAyE;QACzE,IAAI;YAAC;YAAY;YAAQ;YAAY;SAAS,CAACU,QAAQ,CAACV,MAAMW,IAAI,GAAG;YACnEb,gBAAgB;gBACd,GAAGA,aAAa;gBAChB,CAACM,kBAAkB,EAAEJ,MAAMW,IAAI;YACjC;QACF;QAEA,8FAA8F;QAC9F,IAAI;YAAC;YAAQ;YAAY;SAAS,CAACD,QAAQ,CAACV,MAAMW,IAAI,GAAG;YACvD,OAAO;gBACL,GAAGX,KAAK;gBACRM,OAAO;oBACL,GAAGN,MAAMM,KAAK;oBACdM,YAAY;wBACV,GAAGZ,MAAMM,KAAK,EAAEM,UAAU;wBAC1B,aAAa;wBACbC,aAAalB,iBAAiB;4BAC5BkB,aAAab,MAAMM,KAAK,EAAEM,YAAYC;wBACxC;oBACF;gBACF;YACF;QACF;QAEA,IAAIb,MAAMc,MAAM,EAAE;YAChB,OAAO;gBACL,GAAGd,KAAK;gBACRc,QAAQd,MAAMc,MAAM,CAACC,GAAG,CAAC,CAACC,WAAkBjB,YAAYiB,UAAUd;YACpE;QACF;QAEA,IAAIF,MAAMiB,IAAI,EAAE;YACd,OAAO;gBACL,GAAGjB,KAAK;gBACRiB,MAAMjB,MAAMiB,IAAI,CAACF,GAAG,CAAC,CAACG,MAAc,CAAA;wBAClC,GAAGA,GAAG;wBACNJ,QAAQI,IAAIJ,MAAM,CAACC,GAAG,CAAC,CAACC,WAAkBjB,YAAYiB,UAAUd;oBAClE,CAAA;YACF;QACF;QAEA,IAAIF,MAAMmB,MAAM,EAAE;YAChB,OAAO;gBACL,GAAGnB,KAAK;gBACRmB,QAAQnB,MAAMmB,MAAM,CAACJ,GAAG,CAAC,CAACK,QAAgB,CAAA;wBACxC,GAAGA,KAAK;wBACRN,QAAQM,MAAMN,MAAM,CAACC,GAAG,CAAC,CAACC,WACxBjB,YAAYiB,UAAU,CAAC,EAAEd,YAAY,CAAC,EAAEkB,MAAMf,IAAI,CAAC,CAAC;oBAExD,CAAA;YACF;QACF;QAEA,OAAOL;IACT;IAEA,MAAMqB,0BAA0B;QAC9B,GAAGxB,gBAAgB;QACnBiB,QAAQjB,iBAAiBiB,MAAM,CAACC,GAAG,CAAC,CAACf,QAAUD,YAAYC;IAC7D;IAEA,OAAO;QACLF;QACAuB;IACF;AACF,EAAC"}