{"version":3,"sources":["../../../../src/ui/Actions/hooks/useGenerate.ts"],"sourcesContent":["import type { ClientCollectionConfig, UploadField } from 'payload'\n\nimport { useEditorConfigContext } from '@payloadcms/richtext-lexical/client'\nimport { useDocumentInfo, useField, useFieldProps, useForm, useLocale } from '@payloadcms/ui'\nimport { useCompletion, experimental_useObject as useObject } from 'ai/react'\nimport { useCallback, useEffect } from 'react'\n\nimport type { GenerateTextarea, MenuItems } from '../../../types.js'\n\nimport { DocumentSchema } from '../../../ai/RichTextSchema.js'\nimport {\n  PLUGIN_API_ENDPOINT_GENERATE,\n  PLUGIN_API_ENDPOINT_GENERATE_UPLOAD,\n} from '../../../defaults.js'\nimport { useInstructions } from '../../../providers/InstructionsProvider/hook.js'\nimport { getFieldBySchemaPath } from '../../../utilities/getFieldBySchemaPath.js'\nimport { setSafeLexicalState } from '../../../utilities/setSafeLexicalState.js'\nimport { useHistory } from './useHistory.js'\n\n//TODO: DONATION IDEA - Add a url to donate in cli when user installs the plugin and uses it for couple of times.\nexport const useGenerate = () => {\n  const { type, path: pathFromContext, schemaPath } = useFieldProps()\n\n  const editorConfigContext = useEditorConfigContext()\n  const { editor } = editorConfigContext\n\n  const { docConfig } = useDocumentInfo()\n\n  const { setValue } = useField<string>({\n    path: pathFromContext,\n  })\n\n  const { set: setHistory } = useHistory()\n  const { id: instructionId } = useInstructions({\n    path: schemaPath,\n  })\n\n  const { getData } = useForm()\n  const localFromContext = useLocale()\n\n  const {\n    isLoading: loadingObject,\n    object,\n    stop, // TODO: Implement this function\n    submit,\n  } = useObject({\n    api: `/api${PLUGIN_API_ENDPOINT_GENERATE}`,\n    onError: (error) => {\n      console.error('Error generating object:', error)\n    },\n    onFinish: ({ object }) => {\n      setHistory(object)\n    },\n    schema: DocumentSchema,\n  })\n\n  useEffect(() => {\n    if (!object) return\n\n    requestAnimationFrame(() => {\n      if (!editor) {\n        setValue(object)\n        return\n      }\n\n      // Currently this is being used as setValue for RichText component does not render new changes right away.\n      setSafeLexicalState(object, editor)\n    })\n  }, [object])\n\n  const {\n    complete,\n    completion,\n    isLoading: loadingCompletion,\n  } = useCompletion({\n    api: `/api${PLUGIN_API_ENDPOINT_GENERATE}`,\n    onError: (error) => {\n      console.error('Error generating text:', error)\n    },\n    onFinish: (prompt, result) => {\n      setHistory(result)\n    },\n    streamProtocol: 'data',\n  })\n\n  useEffect(() => {\n    if (!completion) return\n\n    requestAnimationFrame(() => {\n      setValue(completion)\n    })\n  }, [completion])\n\n  const streamObject = useCallback(\n    ({ action = 'Compose' }: { action: MenuItems }) => {\n      const doc = getData()\n      const options = {\n        action,\n        instructionId,\n      }\n\n      submit({\n        doc,\n        locale: localFromContext?.code,\n        options,\n      })\n    },\n    [getData, localFromContext?.code, instructionId],\n  )\n\n  const streamText = useCallback(\n    async ({ action = 'Compose' }: { action: MenuItems }) => {\n      const doc = getData()\n\n      const options = {\n        action,\n        instructionId,\n      }\n\n      await complete('', {\n        body: {\n          doc,\n          locale: localFromContext?.code,\n          options,\n        },\n      })\n    },\n    [getData, localFromContext?.code, instructionId],\n  )\n\n  const generateUpload = useCallback(async () => {\n    const doc = getData()\n\n    const fieldInfo = getFieldBySchemaPath(\n      docConfig as ClientCollectionConfig,\n      schemaPath,\n    ) as UploadField\n\n    return fetch(`/api${PLUGIN_API_ENDPOINT_GENERATE_UPLOAD}`, {\n      body: JSON.stringify({\n        doc,\n        locale: localFromContext?.code,\n        options: {\n          instructionId,\n          uploadCollectionSlug: fieldInfo.relationTo || 'media',\n        },\n      } satisfies Parameters<GenerateTextarea>[0]),\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      method: 'POST',\n    })\n      .then(async (generatedImageResponse) => {\n        if (generatedImageResponse.ok) {\n          const { result: generatedImage } = await generatedImageResponse.json()\n          setValue(generatedImage?.id)\n        } else {\n          const { errors = [] } = await generatedImageResponse.json()\n          const errStr = errors.map((error) => error.message).join(', ')\n          throw new Error(errStr)\n        }\n        return generatedImageResponse\n      })\n      .catch((error) => {\n        console.error('Error generating image', error)\n      })\n  }, [getData, localFromContext?.code, instructionId, setValue])\n\n  const generate = useCallback(\n    async (options?: { action: MenuItems }) => {\n      if (type === 'richText') {\n        return streamObject(options)\n      }\n\n      if (['text', 'textarea'].includes(type)) {\n        return streamText(options)\n      }\n\n      if (type === 'upload') {\n        return generateUpload()\n      }\n    },\n    [generateUpload, streamObject, streamText, type],\n  )\n\n  return {\n    generate,\n    isLoading: loadingCompletion || loadingObject,\n  }\n}\n"],"names":["useEditorConfigContext","useDocumentInfo","useField","useFieldProps","useForm","useLocale","useCompletion","experimental_useObject","useObject","useCallback","useEffect","DocumentSchema","PLUGIN_API_ENDPOINT_GENERATE","PLUGIN_API_ENDPOINT_GENERATE_UPLOAD","useInstructions","getFieldBySchemaPath","setSafeLexicalState","useHistory","useGenerate","type","path","pathFromContext","schemaPath","editorConfigContext","editor","docConfig","setValue","set","setHistory","id","instructionId","getData","localFromContext","isLoading","loadingObject","object","stop","submit","api","onError","error","console","onFinish","schema","requestAnimationFrame","complete","completion","loadingCompletion","prompt","result","streamProtocol","streamObject","action","doc","options","locale","code","streamText","body","generateUpload","fieldInfo","fetch","JSON","stringify","uploadCollectionSlug","relationTo","credentials","headers","method","then","generatedImageResponse","ok","generatedImage","json","errors","errStr","map","message","join","Error","catch","generate","includes"],"mappings":"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"}