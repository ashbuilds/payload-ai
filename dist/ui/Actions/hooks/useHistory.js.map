{"version":3,"sources":["../../../../src/ui/Actions/hooks/useHistory.ts"],"sourcesContent":["'use client'\n\nimport { useDocumentInfo, useField, useFieldProps } from '@payloadcms/ui'\nimport { useCallback, useEffect } from 'react'\n\nimport { PLUGIN_NAME } from '../../../defaults.js'\n\nconst STORAGE_KEY = `${PLUGIN_NAME}-fields-history`\n\ninterface HistoryState {\n  [path: string]: {\n    currentIndex: number\n    history: any[]\n  }\n}\n\nexport const useHistory = () => {\n  const { id } = useDocumentInfo()\n  const { path: pathFromContext, schemaPath } = useFieldProps()\n  const { value: currentFieldValue } = useField<string>({\n    path: pathFromContext,\n  })\n\n  const fieldKey = `${id}.${schemaPath}`\n\n  const getLatestHistory = useCallback((): HistoryState => {\n    try {\n      // This condition is applied, as it was somehow triggering on server side\n      if (typeof localStorage !== 'undefined') {\n        return JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}')\n      }\n      return {}\n    } catch (e) {\n      console.error('Error parsing history:', e)\n      return {}\n    }\n  }, [])\n\n  const saveToLocalStorage = useCallback((newGlobalHistory: HistoryState) => {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(newGlobalHistory))\n  }, [])\n\n  // Clear previous history\n  const clearHistory = useCallback(() => {\n    const latestHistory = { ...getLatestHistory() }\n    Object.keys(latestHistory).forEach((k) => {\n      if (!k.startsWith(id.toString())) {\n        delete latestHistory[k]\n      }\n    })\n    saveToLocalStorage(latestHistory)\n  }, [id, fieldKey, getLatestHistory, saveToLocalStorage])\n\n  useEffect(() => {\n    // This is applied to clear out the document history which is not currently in use\n    clearHistory()\n\n    const latestHistory = getLatestHistory()\n    const { currentIndex, history } = latestHistory[fieldKey] || {\n      currentIndex: -1,\n      history: [],\n    }\n\n    let newIndex = currentIndex\n    if (currentIndex == -1) {\n      newIndex = 0\n      if (currentFieldValue) {\n        history[newIndex] = currentFieldValue\n      }\n    }\n\n    const newGlobalHistory = {\n      ...latestHistory,\n      [fieldKey]: { currentIndex: newIndex, history },\n    }\n\n    saveToLocalStorage(newGlobalHistory)\n  }, [fieldKey])\n\n  const set = useCallback(\n    (data: any) => {\n      const latestHistory = getLatestHistory()\n      const { currentIndex, history } = latestHistory[fieldKey] || {\n        currentIndex: -1,\n        history: [],\n      }\n      const newHistory = [...history.slice(0, currentIndex + 1), data]\n      const newGlobalHistory = {\n        ...latestHistory,\n        [fieldKey]: { currentIndex: newHistory.length - 1, history: newHistory },\n      }\n      saveToLocalStorage(newGlobalHistory)\n      return data\n    },\n    [fieldKey, getLatestHistory, saveToLocalStorage],\n  )\n\n  const undo = useCallback(() => {\n    const latestHistory = getLatestHistory()\n    const { currentIndex, history } = latestHistory[fieldKey] || { currentIndex: -1, history: [] }\n    if (currentIndex > 0) {\n      const newIndex = currentIndex - 1\n      const newValue = history[newIndex]\n      const newGlobalHistory = {\n        ...latestHistory,\n        [fieldKey]: { currentIndex: newIndex, history },\n      }\n      saveToLocalStorage(newGlobalHistory)\n      return newValue\n    }\n    return undefined\n  }, [fieldKey, getLatestHistory, saveToLocalStorage])\n\n  const redo = useCallback(() => {\n    const latestHistory = getLatestHistory()\n    const { currentIndex, history } = latestHistory[fieldKey] || { currentIndex: -1, history: [] }\n    if (currentIndex < history.length - 1) {\n      const newIndex = currentIndex + 1\n      const newValue = history[newIndex]\n      const newGlobalHistory = {\n        ...latestHistory,\n        [fieldKey]: { currentIndex: newIndex, history },\n      }\n      saveToLocalStorage(newGlobalHistory)\n      return newValue\n    }\n    return undefined\n  }, [fieldKey, getLatestHistory, saveToLocalStorage])\n\n  const getLatestFieldHistory = useCallback(() => {\n    const latestHistory = getLatestHistory()\n    return latestHistory[fieldKey] || { currentIndex: -1, history: [] }\n  }, [getLatestHistory, fieldKey])\n\n  const fieldHistory = getLatestFieldHistory()\n\n  const canUndo = fieldHistory.currentIndex > 0\n  const canRedo = fieldHistory.currentIndex < fieldHistory.history.length - 1\n  const currentValue = fieldHistory.history[fieldHistory.currentIndex]\n\n  return {\n    canRedo,\n    canUndo,\n    currentValue,\n    redo,\n    set,\n    undo,\n  }\n}\n"],"names":["useDocumentInfo","useField","useFieldProps","useCallback","useEffect","PLUGIN_NAME","STORAGE_KEY","useHistory","id","path","pathFromContext","schemaPath","value","currentFieldValue","fieldKey","getLatestHistory","localStorage","JSON","parse","getItem","e","console","error","saveToLocalStorage","newGlobalHistory","setItem","stringify","clearHistory","latestHistory","Object","keys","forEach","k","startsWith","toString","currentIndex","history","newIndex","set","data","newHistory","slice","length","undo","newValue","undefined","redo","getLatestFieldHistory","fieldHistory","canUndo","canRedo","currentValue"],"mappings":"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"}