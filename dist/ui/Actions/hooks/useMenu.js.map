{"version":3,"sources":["../../../../src/ui/Actions/hooks/useMenu.tsx"],"sourcesContent":["'use client'\n\nimport type { LexicalEditor } from 'lexical'\n\nimport { useField, useFieldProps } from '@payloadcms/ui'\nimport React, { memo, useEffect, useMemo, useState } from 'react'\n\nimport type { BaseItemProps, MenuItems, UseMenuEvents } from '../../../types.js'\n\nimport {\n  DocsAddOnIcon,\n  EditNoteIcon,\n  SegmentIcon,\n  SpellCheckIcon,\n  StylusNoteIcon,\n  SummarizeIcon,\n  TranslateIcon,\n  TuneIcon,\n} from '../Icons.js'\nimport styles from '../actions.module.scss'\n\nconst Item: React.FC<BaseItemProps> = memo(({ children, onClick = () => {} }) => (\n  <span\n    className={styles.generate_button}\n    onClick={onClick}\n    onKeyDown={onClick}\n    role=\"presentation\"\n  >\n    {children}\n  </span>\n))\n\nconst createMenuItem = (IconComponent, text) =>\n  memo(({ hideIcon, onClick }: BaseItemProps) => (\n    <Item onClick={onClick}>\n      {hideIcon || <IconComponent size={18} />}\n      {text}\n    </Item>\n  ))\n\nconst Proofread = createMenuItem(SpellCheckIcon, 'Proofread')\nconst Rephrase = createMenuItem(EditNoteIcon, 'Rephrase')\nconst Translate = createMenuItem(TranslateIcon, 'Translate')\nconst Expand = createMenuItem(DocsAddOnIcon, 'Expand')\nconst Summarize = createMenuItem(SummarizeIcon, 'Summarize')\nconst Simplify = createMenuItem(SegmentIcon, 'Simplify')\nconst Compose = createMenuItem(StylusNoteIcon, 'Compose')\nconst Settings = createMenuItem(TuneIcon, 'Settings')\n\nconst MenuItemsMap = [\n  { name: 'Proofread', component: Proofread, excludedFor: ['upload'] },\n  { name: 'Rephrase', component: Rephrase, excludedFor: ['upload'] },\n  { name: 'Translate', component: Translate, excludedFor: ['upload'] },\n  { name: 'Expand', component: Expand, excludedFor: ['upload', 'text'] },\n  { name: 'Summarize', component: Summarize, excludedFor: ['upload', 'text'] },\n  { name: 'Simplify', component: Simplify, excludedFor: ['upload'] },\n  { name: 'Compose', component: Compose },\n  { name: 'Settings', component: Settings },\n]\n\nconst getActiveComponent = (ac) => {\n  switch (ac) {\n    case 'Proofread':\n      return Proofread\n    case 'Rephrase':\n      return Rephrase\n    case 'Compose':\n      return Compose\n    default:\n      return Rephrase\n  }\n}\n\ntype UseMenuProps = {\n  lexicalEditor: LexicalEditor\n}\n\nexport const useMenu = ({ lexicalEditor }: UseMenuProps, menuEvents: UseMenuEvents) => {\n  const { type: fieldType, path: pathFromContext } = useFieldProps()\n  const field = useField({ path: pathFromContext })\n  const [activeComponent, setActiveComponent] = useState<MenuItems>('Rephrase')\n\n  const { initialValue, value } = field\n\n  useEffect(() => {\n    if (!value) {\n      setActiveComponent('Compose')\n      return\n    }\n\n    if (MenuItemsMap.some((i) => i.excludedFor?.includes(fieldType))) {\n      setActiveComponent('Compose')\n      return\n    }\n\n    if (typeof value === 'string' && value !== initialValue) {\n      setActiveComponent('Proofread')\n    } else {\n      setActiveComponent('Rephrase')\n    }\n  }, [initialValue, value, fieldType, lexicalEditor])\n\n  const MemoizedActiveComponent = useMemo(() => {\n    return ({ disabled = false }) => {\n      const ActiveComponent = getActiveComponent(activeComponent)\n      return <ActiveComponent hideIcon onClick={menuEvents[`on${activeComponent}`]} />\n    }\n  }, [activeComponent, menuEvents])\n\n  const filteredMenuItems = useMemo(\n    () =>\n      MenuItemsMap.filter((i) => i.name !== activeComponent && !i.excludedFor?.includes(fieldType)),\n    [activeComponent, fieldType],\n  )\n\n  const MemoizedMenu = useMemo(() => {\n    return ({ disabled = false, onClose }) => (\n      <div className={styles.menu}>\n        {filteredMenuItems.map((i) => {\n          const Item = i.component\n          return (\n            <Item\n              key={i.name}\n              onClick={() => {\n                menuEvents[`on${i.name}`]()\n                onClose()\n              }}\n            />\n          )\n        })}\n      </div>\n    )\n  }, [filteredMenuItems, menuEvents])\n\n  // Simply return the object without additional useMemo\n  return {\n    ActiveComponent: MemoizedActiveComponent,\n    Menu: MemoizedMenu,\n  }\n}\n"],"names":["useField","useFieldProps","React","memo","useEffect","useMemo","useState","DocsAddOnIcon","EditNoteIcon","SegmentIcon","SpellCheckIcon","StylusNoteIcon","SummarizeIcon","TranslateIcon","TuneIcon","styles","Item","children","onClick","span","className","generate_button","onKeyDown","role","createMenuItem","IconComponent","text","hideIcon","size","Proofread","Rephrase","Translate","Expand","Summarize","Simplify","Compose","Settings","MenuItemsMap","name","component","excludedFor","getActiveComponent","ac","useMenu","lexicalEditor","menuEvents","type","fieldType","path","pathFromContext","field","activeComponent","setActiveComponent","initialValue","value","some","i","includes","MemoizedActiveComponent","disabled","ActiveComponent","filteredMenuItems","filter","MemoizedMenu","onClose","div","menu","map","Menu"],"mappings":"AAAA;;AAIA,SAASA,QAAQ,EAAEC,aAAa,QAAQ,iBAAgB;AACxD,OAAOC,SAASC,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,QAAO;AAIjE,SACEC,aAAa,EACbC,YAAY,EACZC,WAAW,EACXC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,aAAa,EACbC,QAAQ,QACH,cAAa;AACpB,OAAOC,YAAY,yBAAwB;AAE3C,MAAMC,qBAAgCb,KAAK,CAAC,EAAEc,QAAQ,EAAEC,UAAU,KAAO,CAAC,EAAE,iBAC1E,KAACC;QACCC,WAAWL,OAAOM,eAAe;QACjCH,SAASA;QACTI,WAAWJ;QACXK,MAAK;kBAEJN;;AAIL,MAAMO,iBAAiB,CAACC,eAAeC,qBACrCvB,KAAK,CAAC,EAAEwB,QAAQ,EAAET,OAAO,EAAiB,iBACxC,MAACF;YAAKE,SAASA;;gBACZS,0BAAY,KAACF;oBAAcG,MAAM;;gBACjCF;;;AAIP,MAAMG,YAAYL,eAAed,gBAAgB;AACjD,MAAMoB,WAAWN,eAAehB,cAAc;AAC9C,MAAMuB,YAAYP,eAAeX,eAAe;AAChD,MAAMmB,SAASR,eAAejB,eAAe;AAC7C,MAAM0B,YAAYT,eAAeZ,eAAe;AAChD,MAAMsB,WAAWV,eAAef,aAAa;AAC7C,MAAM0B,UAAUX,eAAeb,gBAAgB;AAC/C,MAAMyB,WAAWZ,eAAeV,UAAU;AAE1C,MAAMuB,eAAe;IACnB;QAAEC,MAAM;QAAaC,WAAWV;QAAWW,aAAa;YAAC;SAAS;IAAC;IACnE;QAAEF,MAAM;QAAYC,WAAWT;QAAUU,aAAa;YAAC;SAAS;IAAC;IACjE;QAAEF,MAAM;QAAaC,WAAWR;QAAWS,aAAa;YAAC;SAAS;IAAC;IACnE;QAAEF,MAAM;QAAUC,WAAWP;QAAQQ,aAAa;YAAC;YAAU;SAAO;IAAC;IACrE;QAAEF,MAAM;QAAaC,WAAWN;QAAWO,aAAa;YAAC;YAAU;SAAO;IAAC;IAC3E;QAAEF,MAAM;QAAYC,WAAWL;QAAUM,aAAa;YAAC;SAAS;IAAC;IACjE;QAAEF,MAAM;QAAWC,WAAWJ;IAAQ;IACtC;QAAEG,MAAM;QAAYC,WAAWH;IAAS;CACzC;AAED,MAAMK,qBAAqB,CAACC;IAC1B,OAAQA;QACN,KAAK;YACH,OAAOb;QACT,KAAK;YACH,OAAOC;QACT,KAAK;YACH,OAAOK;QACT;YACE,OAAOL;IACX;AACF;AAMA,OAAO,MAAMa,UAAU,CAAC,EAAEC,aAAa,EAAgB,EAAEC;IACvD,MAAM,EAAEC,MAAMC,SAAS,EAAEC,MAAMC,eAAe,EAAE,GAAGhD;IACnD,MAAMiD,QAAQlD,SAAS;QAAEgD,MAAMC;IAAgB;IAC/C,MAAM,CAACE,iBAAiBC,mBAAmB,GAAG9C,SAAoB;IAElE,MAAM,EAAE+C,YAAY,EAAEC,KAAK,EAAE,GAAGJ;IAEhC9C,UAAU;QACR,IAAI,CAACkD,OAAO;YACVF,mBAAmB;YACnB;QACF;QAEA,IAAIf,aAAakB,IAAI,CAAC,CAACC,IAAMA,EAAEhB,WAAW,EAAEiB,SAASV,aAAa;YAChEK,mBAAmB;YACnB;QACF;QAEA,IAAI,OAAOE,UAAU,YAAYA,UAAUD,cAAc;YACvDD,mBAAmB;QACrB,OAAO;YACLA,mBAAmB;QACrB;IACF,GAAG;QAACC;QAAcC;QAAOP;QAAWH;KAAc;IAElD,MAAMc,0BAA0BrD,QAAQ;QACtC,OAAO,CAAC,EAAEsD,WAAW,KAAK,EAAE;YAC1B,MAAMC,kBAAkBnB,mBAAmBU;YAC3C,qBAAO,KAACS;gBAAgBjC,QAAQ;gBAACT,SAAS2B,UAAU,CAAC,CAAC,EAAE,EAAEM,gBAAgB,CAAC,CAAC;;QAC9E;IACF,GAAG;QAACA;QAAiBN;KAAW;IAEhC,MAAMgB,oBAAoBxD,QACxB,IACEgC,aAAayB,MAAM,CAAC,CAACN,IAAMA,EAAElB,IAAI,KAAKa,mBAAmB,CAACK,EAAEhB,WAAW,EAAEiB,SAASV,aACpF;QAACI;QAAiBJ;KAAU;IAG9B,MAAMgB,eAAe1D,QAAQ;QAC3B,OAAO,CAAC,EAAEsD,WAAW,KAAK,EAAEK,OAAO,EAAE,iBACnC,KAACC;gBAAI7C,WAAWL,OAAOmD,IAAI;0BACxBL,kBAAkBM,GAAG,CAAC,CAACX;oBACtB,MAAMxC,OAAOwC,EAAEjB,SAAS;oBACxB,qBACE,KAACvB;wBAECE,SAAS;4BACP2B,UAAU,CAAC,CAAC,EAAE,EAAEW,EAAElB,IAAI,CAAC,CAAC,CAAC;4BACzB0B;wBACF;uBAJKR,EAAElB,IAAI;gBAOjB;;IAGN,GAAG;QAACuB;QAAmBhB;KAAW;IAElC,sDAAsD;IACtD,OAAO;QACLe,iBAAiBF;QACjBU,MAAML;IACR;AACF,EAAC"}