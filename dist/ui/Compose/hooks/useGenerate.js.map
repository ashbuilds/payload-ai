{"version":3,"sources":["../../../../src/ui/Compose/hooks/useGenerate.ts"],"sourcesContent":["import { useCompletion } from '@ai-sdk/react'\nimport { convertMarkdownToLexical } from '@payloadcms/richtext-lexical'\nimport { useEditorConfigContext } from '@payloadcms/richtext-lexical/client'\nimport { toast, useConfig, useDocumentInfo, useField, useForm, useLocale } from '@payloadcms/ui'\nimport { useCallback, useEffect, useRef } from 'react'\n\nimport type { ActionMenuItems, GenerateTextarea } from '../../../types.js'\n\nimport {\n  PLUGIN_API_ENDPOINT_GENERATE,\n  PLUGIN_API_ENDPOINT_GENERATE_UPLOAD,\n} from '../../../defaults.js'\nimport { useFieldProps } from '../../../providers/FieldProvider/useFieldProps.js'\nimport { setSafeLexicalState } from '../../../utilities/setSafeLexicalState.js'\nimport { useHistory } from './useHistory.js'\n\ntype ActionCallbackParams = { action: ActionMenuItems; params?: unknown }\n\nexport const useGenerate = ({ instructionId }: { instructionId: string }) => {\n  // Create a ref to hold the current instructionId\n  const instructionIdRef = useRef(instructionId)\n\n  // Update the ref whenever instructionId changes\n  useEffect(() => {\n    instructionIdRef.current = instructionId\n  }, [instructionId])\n\n  const { type, path: pathFromContext } = useFieldProps()\n  const editorConfigContext = useEditorConfigContext()\n\n  const { editor, editorConfig } = editorConfigContext\n\n  const { config } = useConfig()\n  const {\n    routes: { api },\n    serverURL,\n  } = config\n\n  const { setValue } = useField<string>({\n    path: pathFromContext ?? '',\n  })\n\n  const { set: setHistory } = useHistory()\n\n  const { getData } = useForm()\n  const { id: documentId, collectionSlug } = useDocumentInfo()\n\n  const localFromContext = useLocale()\n\n  // For rich text fields - generates markdown and converts to Lexical\n  const {\n    complete: completeRichText,\n    completion: richTextCompletion,\n    isLoading: loadingRichText,\n    stop: stopRichText,\n  } = useCompletion({\n    api: `${serverURL}${api}${PLUGIN_API_ENDPOINT_GENERATE}`,\n    onError: (error: any) => {\n      toast.error(`Failed to generate: ${error.message}`)\n      console.error('Error generating rich text:', error)\n    },\n    onFinish: async (_prompt: any, result: any) => {\n      // Convert markdown to Lexical JSON\n      const lexicalJSON = await convertMarkdownToLexical({\n        editorConfig: editorConfig as any,\n        markdown: result,\n      })\n      setHistory(lexicalJSON)\n      setValue(lexicalJSON)\n    },\n    streamProtocol: 'data',\n  })\n\n  // Apply markdown to Lexical conversion during streaming\n  useEffect(() => {\n    if (!richTextCompletion || !editor || !editorConfig) {\n      return\n    }\n\n    requestAnimationFrame(async () => {\n      try {\n        // Convert the current markdown to Lexical JSON\n        const lexicalJSON = await convertMarkdownToLexical({\n          editorConfig: editorConfig as any,\n          markdown: richTextCompletion,\n        })\n        setSafeLexicalState(lexicalJSON, editor)\n      } catch (error) {\n        console.error('Error converting markdown to Lexical:', error)\n      }\n    })\n  }, [richTextCompletion, editor, editorConfig])\n\n  // For plain text/textarea fields\n  const {\n    complete: completeText,\n    completion: textCompletion,\n    isLoading: loadingText,\n    stop: stopText,\n  } = useCompletion({\n    api: `${serverURL}${api}${PLUGIN_API_ENDPOINT_GENERATE}`,\n    onError: (error: any) => {\n      toast.error(`Failed to generate: ${error.message}`)\n      console.error('Error generating text:', error)\n    },\n    onFinish: (_prompt: any, result: any) => {\n      setHistory(result)\n    },\n    streamProtocol: 'data',\n  })\n\n  useEffect(() => {\n    if (!textCompletion) {\n      return\n    }\n\n    requestAnimationFrame(() => {\n      setValue(textCompletion)\n    })\n  }, [textCompletion])\n\n  const streamRichText = useCallback(\n    async ({ action = 'Compose', params }: ActionCallbackParams) => {\n      const doc = getData()\n      const currentInstructionId = instructionIdRef.current\n\n      const options = {\n        action,\n        actionParams: params,\n        instructionId: currentInstructionId,\n      }\n\n      await completeRichText('', {\n        body: {\n          doc: {\n            ...doc,\n            id: documentId,\n          },\n          locale: localFromContext?.code,\n          options,\n        },\n      })\n    },\n    [getData, localFromContext?.code, instructionIdRef, completeRichText, documentId],\n  )\n\n  const streamText = useCallback(\n    async ({ action = 'Compose', params }: ActionCallbackParams) => {\n      const doc = getData()\n      const currentInstructionId = instructionIdRef.current\n\n      const options = {\n        action,\n        actionParams: params,\n        instructionId: currentInstructionId,\n      }\n\n      await completeText('', {\n        body: {\n          doc: {\n            ...doc,\n            id: documentId,\n          },\n          locale: localFromContext?.code,\n          options,\n        },\n      })\n    },\n    [getData, localFromContext?.code, instructionIdRef, completeText, documentId],\n  )\n\n  const generateUpload = useCallback(async () => {\n    const doc = getData()\n    const currentInstructionId = instructionIdRef.current\n\n    return fetch(`${serverURL}${api}${PLUGIN_API_ENDPOINT_GENERATE_UPLOAD}`, {\n      body: JSON.stringify({\n        collectionSlug: collectionSlug ?? '',\n        doc,\n        documentId,\n        locale: localFromContext?.code,\n        options: {\n          instructionId: currentInstructionId,\n        },\n      } satisfies Parameters<GenerateTextarea>[0]),\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      method: 'POST',\n    })\n      .then(async (uploadResponse) => {\n        if (uploadResponse.ok) {\n          const { result } = await uploadResponse.json()\n          if (!result) {\n            throw new Error('generateUpload: Something went wrong')\n          }\n\n          setValue(result?.id)\n          setHistory(result?.id)\n          console.log('Image updated...', result)\n        } else {\n          const { errors = [] } = await uploadResponse.json()\n          const errStr = errors.map((error: any) => error.message).join(', ')\n          throw new Error(errStr)\n        }\n        return uploadResponse\n      })\n      .catch((error) => {\n        toast.error(`Failed to generate: ${error.message}`)\n        console.error(\n          'Error generating or setting your upload, please set it manually if its saved in your media files.',\n          error\n        )\n      })\n  }, [getData, localFromContext?.code, instructionIdRef, setValue, documentId, collectionSlug])\n\n  const generate = useCallback(\n    async (options?: ActionCallbackParams) => {\n      if (type === 'richText') {\n        return streamRichText(options ?? { action: 'Compose' })\n      }\n\n      if (['text', 'textarea'].includes(type ?? '') && type) {\n        return streamText(options ?? { action: 'Compose' })\n      }\n\n      if (type === 'upload') {\n        return generateUpload()\n      }\n    },\n    [generateUpload, streamRichText, streamText, type],\n  )\n\n  const stop = useCallback(() => {\n    console.log('Stopping...')\n    stopRichText()\n    stopText()\n  }, [stopRichText, stopText])\n\n  return {\n    generate,\n    isLoading: loadingText || loadingRichText,\n    stop,\n  }\n}\n"],"names":["useCompletion","convertMarkdownToLexical","useEditorConfigContext","toast","useConfig","useDocumentInfo","useField","useForm","useLocale","useCallback","useEffect","useRef","PLUGIN_API_ENDPOINT_GENERATE","PLUGIN_API_ENDPOINT_GENERATE_UPLOAD","useFieldProps","setSafeLexicalState","useHistory","useGenerate","instructionId","instructionIdRef","current","type","path","pathFromContext","editorConfigContext","editor","editorConfig","config","routes","api","serverURL","setValue","set","setHistory","getData","id","documentId","collectionSlug","localFromContext","complete","completeRichText","completion","richTextCompletion","isLoading","loadingRichText","stop","stopRichText","onError","error","message","console","onFinish","_prompt","result","lexicalJSON","markdown","streamProtocol","requestAnimationFrame","completeText","textCompletion","loadingText","stopText","streamRichText","action","params","doc","currentInstructionId","options","actionParams","body","locale","code","streamText","generateUpload","fetch","JSON","stringify","credentials","headers","method","then","uploadResponse","ok","json","Error","log","errors","errStr","map","join","catch","generate","includes"],"mappings":"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"}