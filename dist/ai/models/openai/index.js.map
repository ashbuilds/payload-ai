{"version":3,"sources":["../../../../src/ai/models/openai/index.ts"],"sourcesContent":["import type { SpeechCreateParams } from 'openai/resources/audio/speech'\nimport type { File } from 'payload'\n\nimport { openai } from '@ai-sdk/openai'\nimport { streamText } from 'ai'\n\nimport type { GenerationConfig } from '../../../types.js'\n\nimport { generateFileNameByPrompt } from '../../utils/generateFileNameByPrompt.js'\nimport { generateImage } from './generateImage.js'\nimport { generateRichText } from './generateRichText.js'\nimport { generateVoice } from './generateVoice.js'\n\n//TODO: Simplify this file by moving the handlers to separate files and remove duplicate code\n//TODO: every config must have default settings selected\nexport const OpenAIConfig: GenerationConfig = {\n  models: [\n    {\n      id: 'openai-gpt-text',\n      name: 'OpenAI GPT Text',\n      fields: ['text', 'textarea'],\n      handler: async (\n        prompt: string,\n        options: { locale: string; model: string; system: string },\n      ) => {\n        const finalPrompt = `Output language code: ${options.locale}\n          Prompt: ${prompt}\n          Output:\n          `\n\n        console.log('finalPrompt: ', finalPrompt)\n        const streamTextResult = await streamText({\n          model: openai(options.model),\n          prompt: finalPrompt,\n          system: options.system,\n        })\n\n        return streamTextResult.toAIStreamResponse()\n      },\n      output: 'text',\n      settings: {\n        name: 'openai-gpt-text-settings',\n        type: 'group',\n        admin: {\n          condition(data) {\n            return data['model-id'] === 'openai-gpt-text'\n          },\n        },\n        fields: [\n          {\n            name: 'model',\n            type: 'select',\n            defaultValue: 'gpt-4o-mini',\n            label: 'Model',\n            options: ['gpt-4o', 'gpt-4-turbo', 'gpt-4o-mini', 'gpt-3.5-turbo'],\n          },\n        ],\n        label: 'OpenAI GPT Settings',\n      },\n    },\n    {\n      id: 'dall-e',\n      name: 'OpenAI DALL-E',\n      fields: ['upload'],\n      handler: async (prompt: string, options) => {\n        const imageData = await generateImage(prompt, options)\n        return {\n          data: {\n            alt: imageData.alt,\n          },\n          file: {\n            name: `image_${generateFileNameByPrompt(imageData.alt || prompt)}.jpeg`,\n            data: imageData.buffer,\n            mimetype: 'image/jpeg',\n            size: imageData.buffer.byteLength,\n          } as File,\n        }\n      },\n      output: 'image',\n      settings: {\n        name: 'dalle-e-settings',\n        type: 'group',\n        admin: {\n          condition(data) {\n            return data['model-id'] === 'dall-e'\n          },\n        },\n        fields: [\n          {\n            name: 'version',\n            type: 'select',\n            defaultValue: 'dall-e-3',\n            label: 'Version',\n            options: ['dall-e-3', 'dall-e-2'],\n          },\n          {\n            type: 'row',\n            fields: [\n              {\n                name: 'size',\n                type: 'select',\n                defaultValue: '1024x1024',\n                label: 'Size',\n                options: ['256x256', '512x512', '1024x1024', '1792x1024', '1024x1792'],\n              },\n              {\n                name: 'style',\n                type: 'select',\n                defaultValue: 'natural',\n                label: 'Style',\n                options: ['vivid', 'natural'],\n              },\n            ],\n          },\n          {\n            name: 'enable-prompt-optimization',\n            type: 'checkbox',\n            label: 'Optimize prompt',\n          },\n        ],\n        label: 'OpenAI DALL-E Settings',\n      },\n    },\n    {\n      id: 'tts',\n      name: 'OpenAI Text-to-Speech',\n      fields: ['upload'],\n      handler: async (text: string, options) => {\n        //TODO: change it to open ai text to speech api\n        const voiceData = await generateVoice(text, options)\n        return {\n          data: {\n            alt: text,\n          },\n          file: {\n            name: `voice_${generateFileNameByPrompt(text)}.mp3`,\n            data: voiceData.buffer,\n            mimetype: 'audio/mp3',\n            size: voiceData.buffer.byteLength,\n          } as File,\n        }\n      },\n      output: 'audio',\n      settings: {\n        name: 'openai-tts-settings',\n        type: 'group',\n        admin: {\n          condition(data) {\n            return data['model-id'] === 'tts'\n          },\n        },\n        fields: [\n          {\n            name: 'voice',\n            type: 'select',\n            defaultValue: 'alloy',\n            label: 'Voice',\n            options: ['alloy', 'echo', 'fable', 'onyx', 'nova', 'shimmer'] as Array<\n              SpeechCreateParams['voice']\n            >,\n          },\n          {\n            name: 'model',\n            type: 'select',\n            defaultValue: 'tts-1',\n            label: 'Model',\n            options: ['tts-1', 'tts-1-hd'] as Array<SpeechCreateParams['model']>,\n          },\n          {\n            name: 'response_format',\n            type: 'select',\n            defaultValue: 'mp3',\n            label: 'Response Format',\n            options: ['mp3', 'opus', 'aac', 'flac', 'wav', 'pcm'] as Array<\n              SpeechCreateParams['response_format']\n            >,\n          },\n          {\n            name: 'speed',\n            type: 'number',\n            defaultValue: 1,\n            label: 'Speed',\n            max: 4,\n            min: 0.25,\n          },\n        ],\n        label: 'OpenAI Text-to-Speech Settings',\n      },\n    },\n    {\n      id: 'openai-gpt-object',\n      name: 'OpenAI GPT',\n      fields: ['richText'], //TODO: Use these field to find and replace auto generation functionality in payload config - then we dont need to manually pass the fields - use field admin.components.Label function\n      handler: (text: string, options) => {\n        //TODO: change it to open ai text to speech api\n        return generateRichText(text, options)\n      },\n      output: 'text',\n      settings: {\n        name: 'openai-gpt-object-settings',\n        type: 'group',\n        admin: {\n          condition(data) {\n            return data['model-id'] === 'openai-gpt-object'\n          },\n        },\n        fields: [\n          {\n            name: 'model',\n            type: 'select',\n            defaultValue: 'gpt-4o',\n            label: 'Model',\n            options: ['gpt-4o', 'gpt-4-turbo', 'gpt-4o-mini'],\n          },\n          {\n            name: 'system',\n            type: 'textarea',\n            defaultValue: `INSTRUCTIONS:\n      You are a highly skilled and professional blog writer,\n      renowned for crafting engaging and well-organized articles.\n      When given a title, you meticulously create blogs that are not only\n      informative and accurate but also captivating and beautifully structured.`,\n            label: 'System prompt',\n          },\n          {\n            /**TODO's:\n             *  - Layouts can be saved in as an array\n             *  - user can add their own layout to collections and use it later for generate specific rich text\n             *  - user can select previously added layout\n             */\n            name: 'layout',\n            type: 'textarea',\n            defaultValue: `[paragraph] - A short introduction to the topic.\n            [horizontalrule]\n            [list] - A section with headings and a paragraph.\n            [horizontalrule]\n            [paragraph] - A short conclusion.\n            [quote] - A quote from a famous person based on the topic.\n            `,\n            label: 'Layout',\n          },\n        ],\n        label: 'OpenAI GPT Settings',\n      },\n    },\n  ],\n  provider: 'OpenAI',\n}\n"],"names":["openai","streamText","generateFileNameByPrompt","generateImage","generateRichText","generateVoice","OpenAIConfig","models","id","name","fields","handler","prompt","options","finalPrompt","locale","console","log","streamTextResult","model","system","toAIStreamResponse","output","settings","type","admin","condition","data","defaultValue","label","imageData","alt","file","buffer","mimetype","size","byteLength","text","voiceData","max","min","provider"],"mappings":"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"}