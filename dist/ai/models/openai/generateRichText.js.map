{"version":3,"sources":["../../../../src/ai/models/openai/generateRichText.ts"],"sourcesContent":["import { openai } from '@ai-sdk/openai'\nimport { streamObject } from 'ai'\n\nimport { DocumentSchema } from '../../RichTextSchema.js'\nimport { exampleOutput } from '../example.js'\n\nexport const generateRichText = async (text: string, options: any) => {\n  const streamResult = await streamObject({\n    model: openai(options.model),\n    prompt: text,\n    schema: DocumentSchema,\n    system: `${options.system}\n\n      LAYOUT:\n      ${options.layout}\n      `,\n  })\n  return streamResult.toTextStreamResponse()\n}\n\nexport interface SerializedLexicalNode {\n  type: string\n  version: number\n}\n\nexport type Spread<T1, T2> = Omit<T2, keyof T1> & T1\nexport type SerializedElementNode<T extends SerializedLexicalNode = SerializedLexicalNode> = Spread<\n  {\n    children: T[]\n\n    direction: 'ltr' | 'rtl' | null\n\n    format: ElementFormatType\n\n    indent: number\n  },\n  SerializedLexicalNode\n>\n\nexport type SerializedRootNode<T extends SerializedLexicalNode = SerializedLexicalNode> =\n  SerializedElementNode<T>\n\nexport type ElementFormatType = '' | 'center' | 'end' | 'justify' | 'left' | 'right' | 'start'\n"],"names":["openai","streamObject","DocumentSchema","generateRichText","text","options","streamResult","model","prompt","schema","system","layout","toTextStreamResponse"],"mappings":"AAAA,SAASA,MAAM,QAAQ,iBAAgB;AACvC,SAASC,YAAY,QAAQ,KAAI;AAEjC,SAASC,cAAc,QAAQ,0BAAyB;AAGxD,OAAO,MAAMC,mBAAmB,OAAOC,MAAcC;IACnD,MAAMC,eAAe,MAAML,aAAa;QACtCM,OAAOP,OAAOK,QAAQE,KAAK;QAC3BC,QAAQJ;QACRK,QAAQP;QACRQ,QAAQ,CAAC,EAAEL,QAAQK,MAAM,CAAC;;;MAGxB,EAAEL,QAAQM,MAAM,CAAC;MACjB,CAAC;IACL;IACA,OAAOL,aAAaM,oBAAoB;AAC1C,EAAC"}