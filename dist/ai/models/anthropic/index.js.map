{"version":3,"sources":["../../../../src/ai/models/anthropic/index.ts"],"sourcesContent":["import { anthropic } from '@ai-sdk/anthropic'\nimport { streamText } from 'ai'\n\nimport type { GenerationConfig } from '../../../types.js'\n\nimport { extractPromptAttachments } from '../../../utilities/extractPromptAttachments.js'\nimport { defaultSystemPrompt } from '../../prompts.js'\nimport { generateRichText } from './generateRichText.js'\n\nconst MODEL_KEY = 'ANTH-C'\nconst MODELS = [\n  'claude-opus-4-1',\n  'claude-opus-4-0',\n  'claude-sonnet-4-0',\n  'claude-3-opus-latest',\n  'claude-3-5-haiku-latest',\n  'claude-3-5-sonnet-latest',\n  'claude-3-7-sonnet-latest',\n]\n\nexport const AnthropicConfig: GenerationConfig = {\n  models: [\n    {\n      id: `${MODEL_KEY}-text`,\n      name: 'Anthropic Claude',\n      fields: ['text', 'textarea'],\n      handler: (prompt: string, options: { extractAttachments: boolean; locale: string; maxTokens: number; model: string; system: string; temperature: number; }) => {\n        const streamTextResult = streamText({\n          maxOutputTokens: options.maxTokens || 5000,\n          model: anthropic(options.model),\n          onError: (error) => {\n            console.error(`${MODEL_KEY}-text: `, error)\n          },\n          prompt: options.extractAttachments ? extractPromptAttachments(prompt) : prompt,\n          system: options.system || defaultSystemPrompt,\n          temperature: options.temperature || 0.7,\n        })\n\n        return streamTextResult.toUIMessageStreamResponse();\n      },\n      output: 'text',\n      settings: {\n        name: `${MODEL_KEY}-text-settings`,\n        type: 'group',\n        admin: {\n          condition(data) {\n            return data['model-id'] === `${MODEL_KEY}-text`\n          },\n        },\n        fields: [\n          {\n            name: 'model',\n            type: 'select',\n            defaultValue: 'claude-3-5-sonnet-latest',\n            label: 'Model',\n            options: MODELS,\n          },\n          {\n            type: 'row', fields: [\n              {\n                name: 'maxTokens',\n                type: 'number',\n                defaultValue: 5000,\n              },\n              {\n                name: 'temperature',\n                type: 'number',\n                defaultValue: 0.7,\n                max: 1,\n                min: 0,\n              },\n\n            ]\n          },\n          {\n            name: 'extractAttachments',\n            type: 'checkbox',\n          }          \n        ],\n        label: 'Anthropic Claude Settings',\n      },\n    },\n    {\n      id: `${MODEL_KEY}-object`,\n      name: 'Anthropic Claude',\n      fields: ['richText'],\n      handler: (text: string, options) => {\n        return generateRichText(text, options)\n      },\n      output: 'text',\n      settings: {\n        name: `${MODEL_KEY}-object-settings`,\n        type: 'group',\n        admin: {\n          condition(data) {\n            return data['model-id'] === `${MODEL_KEY}-object`\n          },\n        },\n        fields: [\n          {\n            name: 'model',\n            type: 'select',\n            defaultValue: 'claude-3-5-sonnet-latest',\n            label: 'Model',\n            options: MODELS,\n          },\n          {\n            type: 'row', fields: [\n              {\n                name: 'maxTokens',\n                type: 'number',\n                defaultValue: 5000,\n              },\n              {\n                name: 'temperature',\n                type: 'number',\n                defaultValue: 0.7,\n                max: 1,\n                min: 0,\n              },\n\n            ]\n          },\n          {\n            name: 'extractAttachments',\n            type: 'checkbox',\n          }\n        ],\n        label: 'Anthropic Claude Settings',\n      },\n    },\n  ],\n  provider: 'Anthropic',\n}\n"],"names":["anthropic","streamText","extractPromptAttachments","defaultSystemPrompt","generateRichText","MODEL_KEY","MODELS","AnthropicConfig","models","id","name","fields","handler","prompt","options","streamTextResult","maxOutputTokens","maxTokens","model","onError","error","console","extractAttachments","system","temperature","toUIMessageStreamResponse","output","settings","type","admin","condition","data","defaultValue","label","max","min","text","provider"],"mappings":"AAAA,SAASA,SAAS,QAAQ,oBAAmB;AAC7C,SAASC,UAAU,QAAQ,KAAI;AAI/B,SAASC,wBAAwB,QAAQ,iDAAgD;AACzF,SAASC,mBAAmB,QAAQ,mBAAkB;AACtD,SAASC,gBAAgB,QAAQ,wBAAuB;AAExD,MAAMC,YAAY;AAClB,MAAMC,SAAS;IACb;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED,OAAO,MAAMC,kBAAoC;IAC/CC,QAAQ;QACN;YACEC,IAAI,GAAGJ,UAAU,KAAK,CAAC;YACvBK,MAAM;YACNC,QAAQ;gBAAC;gBAAQ;aAAW;YAC5BC,SAAS,CAACC,QAAgBC;gBACxB,MAAMC,mBAAmBd,WAAW;oBAClCe,iBAAiBF,QAAQG,SAAS,IAAI;oBACtCC,OAAOlB,UAAUc,QAAQI,KAAK;oBAC9BC,SAAS,CAACC;wBACRC,QAAQD,KAAK,CAAC,GAAGf,UAAU,OAAO,CAAC,EAAEe;oBACvC;oBACAP,QAAQC,QAAQQ,kBAAkB,GAAGpB,yBAAyBW,UAAUA;oBACxEU,QAAQT,QAAQS,MAAM,IAAIpB;oBAC1BqB,aAAaV,QAAQU,WAAW,IAAI;gBACtC;gBAEA,OAAOT,iBAAiBU,yBAAyB;YACnD;YACAC,QAAQ;YACRC,UAAU;gBACRjB,MAAM,GAAGL,UAAU,cAAc,CAAC;gBAClCuB,MAAM;gBACNC,OAAO;oBACLC,WAAUC,IAAI;wBACZ,OAAOA,IAAI,CAAC,WAAW,KAAK,GAAG1B,UAAU,KAAK,CAAC;oBACjD;gBACF;gBACAM,QAAQ;oBACN;wBACED,MAAM;wBACNkB,MAAM;wBACNI,cAAc;wBACdC,OAAO;wBACPnB,SAASR;oBACX;oBACA;wBACEsB,MAAM;wBAAOjB,QAAQ;4BACnB;gCACED,MAAM;gCACNkB,MAAM;gCACNI,cAAc;4BAChB;4BACA;gCACEtB,MAAM;gCACNkB,MAAM;gCACNI,cAAc;gCACdE,KAAK;gCACLC,KAAK;4BACP;yBAED;oBACH;oBACA;wBACEzB,MAAM;wBACNkB,MAAM;oBACR;iBACD;gBACDK,OAAO;YACT;QACF;QACA;YACExB,IAAI,GAAGJ,UAAU,OAAO,CAAC;YACzBK,MAAM;YACNC,QAAQ;gBAAC;aAAW;YACpBC,SAAS,CAACwB,MAActB;gBACtB,OAAOV,iBAAiBgC,MAAMtB;YAChC;YACAY,QAAQ;YACRC,UAAU;gBACRjB,MAAM,GAAGL,UAAU,gBAAgB,CAAC;gBACpCuB,MAAM;gBACNC,OAAO;oBACLC,WAAUC,IAAI;wBACZ,OAAOA,IAAI,CAAC,WAAW,KAAK,GAAG1B,UAAU,OAAO,CAAC;oBACnD;gBACF;gBACAM,QAAQ;oBACN;wBACED,MAAM;wBACNkB,MAAM;wBACNI,cAAc;wBACdC,OAAO;wBACPnB,SAASR;oBACX;oBACA;wBACEsB,MAAM;wBAAOjB,QAAQ;4BACnB;gCACED,MAAM;gCACNkB,MAAM;gCACNI,cAAc;4BAChB;4BACA;gCACEtB,MAAM;gCACNkB,MAAM;gCACNI,cAAc;gCACdE,KAAK;gCACLC,KAAK;4BACP;yBAED;oBACH;oBACA;wBACEzB,MAAM;wBACNkB,MAAM;oBACR;iBACD;gBACDK,OAAO;YACT;QACF;KACD;IACDI,UAAU;AACZ,EAAC"}