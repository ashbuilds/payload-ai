{"version":3,"sources":["../../../src/ai/schemas/lexicalJsonSchema.ts"],"sourcesContent":["import type { JSONSchema } from 'openai/lib/jsonschema'\n\nimport { isObjectSchema } from '../utils/isObjectSchema.js'\n\nexport interface LexicalNodeSchema extends JSONSchema {\n  $schema?: string\n  additionalProperties?: boolean\n  definitions?: Record<string, any>\n  properties: {\n    [key: string]: any\n    children?: {\n      items: {\n        $ref?: string\n        anyOf?: { $ref: string }[]\n      }\n      type: 'array'\n    }\n    type?: {\n      enum: string[]\n      type: 'string'\n    }\n  }\n  required?: string[]\n  type: 'object'\n}\n\nexport const documentSchema: LexicalNodeSchema = {\n  type: 'object',\n  $schema: 'http://json-schema.org/draft-07/schema#',\n  additionalProperties: false,\n  definitions: {\n    LineBreakNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['linebreak'] },\n        version: { type: 'number' },\n      },\n      required: ['type', 'version'],\n    },\n    TabNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['tab'] },\n        version: { type: 'number' },\n      },\n      required: ['type', 'version'],\n    },\n    // Text Node (Leaf Node)\n    TextNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['text'] },\n        detail: {\n          type: 'number',\n          description: 'Text detail flags',\n          enum: [\n            0, // No details\n            1, // IS_DIRECTIONLESS\n            2, // IS_UNMERGEABLE\n            3, // IS_DIRECTIONLESS + IS_UNMERGEABLE\n          ],\n          examples: [\n            { description: 'No special details', value: 0 },\n            { description: 'Directionless', value: 1 },\n            { description: 'Unmergeable', value: 2 },\n            { description: 'Directionless + Unmergeable', value: 3 },\n          ],\n        },\n        direction: {\n          type: ['string', 'null'],\n          enum: ['ltr', null],\n        },\n        format: {\n          type: 'number',\n          description: `Format flags for text:\n    0 = No format\n    1 = Bold\n    2 = Italic\n    3 = Bold + Italic (1|2)\n    4 = Strikethrough\n    8 = Underline\n    9 = Bold + Underline (1|8)\n    16 = Code\n    32 = Subscript\n    64 = Superscript\n    128 = Highlight\n    \n    Formats can be combined using binary OR (|).\n    Example combinations:\n    - Bold + Italic = 1|2 = 3\n    - Bold + Underline = 1|8 = 9\n    - Italic + Underline = 2|8 = 10\n    - Bold + Italic + Underline = 1|2|8 = 11`,\n        },\n        indent: { type: 'number' },\n        mode: {\n          type: 'number',\n          description: 'Text mode flags',\n          enum: [\n            0, // Normal\n            1, // Token\n            2, // Segmented\n          ],\n          examples: [\n            { description: 'Normal text', value: 0 },\n            { description: 'Token text', value: 1 },\n            { description: 'Segmented text', value: 2 },\n          ],\n        },\n        style: {\n          type: 'string',\n          description: 'CSS style string (e.g., \"color: red; font-size: 12px;\")',\n        },\n        text: { type: 'string' },\n        version: { type: 'number' },\n      },\n      required: [\n        'type',\n        'text',\n        'format',\n        'style',\n        'mode',\n        'detail',\n        'direction',\n        'indent',\n        'version',\n      ],\n    },\n    // Styled Table Cell Node\n    TableCellNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['tablecell'] },\n        children: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/TextNode',\n          },\n        },\n        colSpan: { type: 'number' },\n        direction: {\n          type: ['string', 'null'],\n          enum: ['ltr', null],\n        },\n        headerState: { type: 'number' },\n        indent: { type: 'number' },\n        version: { type: 'number' },\n        width: {\n          type: ['null'],\n          enum: [null],\n        },\n      },\n      required: [\n        'type',\n        'children',\n        'headerState',\n        'colSpan',\n        'width',\n        'direction',\n        'indent',\n        'version',\n      ],\n    },\n    // Styled Table Row Node\n    TableRowNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['tablerow'] },\n        children: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/TableCellNode',\n          },\n        },\n        height: { type: 'number' },\n      },\n      required: ['type', 'children', 'height'],\n    },\n    // Styled Table Node\n    TableNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['table'] },\n        children: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/TableRowNode',\n          },\n        },\n      },\n      required: ['type', 'children'],\n    },\n    // Heading Node\n    HeadingNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['heading'] },\n        children: {\n          type: 'array',\n          items: {\n            anyOf: [\n              { $ref: '#/definitions/TextNode' },\n              { $ref: '#/definitions/LinkNode' },\n              { $ref: '#/definitions/LineBreakNode' },\n              { $ref: '#/definitions/TabNode' },\n            ],\n          },\n        },\n        direction: {\n          type: ['string', 'null'],\n          enum: ['ltr', null],\n        },\n        indent: { type: 'number' },\n        tag: { type: 'string', enum: ['h1', 'h2', 'h3'] },\n        version: { type: 'number' },\n      },\n      required: ['type', 'tag', 'children', 'direction', 'indent', 'version'],\n    },\n    // Paragraph Node\n    ParagraphNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['paragraph'] },\n        children: {\n          type: 'array',\n          items: {\n            anyOf: [\n              { $ref: '#/definitions/TextNode' },\n              { $ref: '#/definitions/LinkNode' },\n              { $ref: '#/definitions/CodeNode' },\n              { $ref: '#/definitions/LineBreakNode' },\n              { $ref: '#/definitions/TabNode' },\n            ],\n          },\n        },\n        direction: {\n          type: ['string', 'null'],\n          enum: ['ltr', null],\n        },\n        format: {\n          type: 'string',\n          description:\n            'Format alignment based on content. Prioritize \"start\", then \"center\", and use \"right\" only when appropriate.',\n          enum: ['start', 'center', 'right'],\n        },\n        indent: { type: 'number' },\n        textFormat: { type: 'number' },\n        textStyle: {\n          type: 'string',\n          description: 'CSS style string (e.g., \"color: red; font-size: 12px;\")',\n        },\n        version: { type: 'number' },\n      },\n      required: [\n        'type',\n        'children',\n        'direction',\n        'format',\n        'indent',\n        'textFormat',\n        'textStyle',\n        'version',\n      ],\n    },\n    // Link Node\n    LinkNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['link'] },\n        children: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/TextNode',\n          },\n        },\n        url: { type: 'string' },\n      },\n      required: ['type', 'url', 'children'],\n    },\n    // List Item Node\n    ListItemNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        // NOTE: Do not change the position of \"indent\", models like gpt generate properties as they are\n        //  defined in schema, moving the position of property \"indent\"\n        //  can cause issue with schema validation while streaming generated json to lexical editor\n        indent: { type: 'number', enum: [0, 1] },\n\n        type: { type: 'string', enum: ['listitem'] },\n        children: {\n          type: 'array',\n          items: {\n            anyOf: [\n              { $ref: '#/definitions/ParagraphNode' },\n              { $ref: '#/definitions/ListNode' },\n              { $ref: '#/definitions/LineBreakNode' },\n            ],\n          },\n        },\n      },\n      required: ['indent', 'type', 'children'],\n    },\n    // List Node\n    ListNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['list'] },\n        children: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/ListItemNode',\n          },\n        },\n        listType: { type: 'string', enum: ['bullet', 'number'] },\n      },\n      required: ['type', 'listType', 'children'],\n    },\n    // Quote Node\n    QuoteNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['quote'] },\n        children: {\n          type: 'array',\n          items: {\n            anyOf: [\n              { $ref: '#/definitions/TextNode' },\n              { $ref: '#/definitions/ParagraphNode' },\n              { $ref: '#/definitions/LineBreakNode' },\n              { $ref: '#/definitions/TabNode' },\n            ],\n          },\n        },\n      },\n      required: ['type', 'children'],\n    },\n    // Code Node\n    CodeNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['code'] },\n        code: { type: 'string' },\n        language: { type: 'string' },\n      },\n      required: ['type', 'code', 'language'],\n    },\n    // Horizontal Rule Node\n    HorizontalRuleNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['horizontalrule'] },\n      },\n      required: ['type'],\n    },\n    // Image Node\n    ImageNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['image'] },\n        alt: { type: 'string' },\n        caption: {\n          type: 'array',\n          items: {\n            $ref: '#/definitions/TextNode',\n          },\n        },\n        src: { type: 'string' },\n      },\n      required: ['type', 'src', 'alt', 'caption'],\n    },\n    // Root Node\n    RootNode: {\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        type: { type: 'string', enum: ['root'] },\n        children: {\n          type: 'array',\n          items: {\n            anyOf: [\n              { $ref: '#/definitions/TextNode' },\n              { $ref: '#/definitions/HeadingNode' },\n              { $ref: '#/definitions/ParagraphNode' },\n              { $ref: '#/definitions/LinkNode' },\n              { $ref: '#/definitions/ListNode' },\n              { $ref: '#/definitions/QuoteNode' },\n              { $ref: '#/definitions/CodeNode' },\n              { $ref: '#/definitions/HorizontalRuleNode' },\n              { $ref: '#/definitions/ImageNode' },\n              { $ref: '#/definitions/TableNode' },\n            ],\n          },\n        },\n        direction: {\n          type: ['string', 'null'],\n          enum: ['ltr', null],\n        },\n        indent: { type: 'number' },\n        version: { type: 'number' },\n      },\n      required: ['type', 'children', 'direction', 'indent', 'version'],\n    },\n  },\n  properties: {\n    root: {\n      $ref: '#/definitions/RootNode',\n    },\n  },\n  required: ['root'],\n}\n\nexport const lexicalJsonSchema = (customNodes: JSONSchema[] | undefined) => {\n  const schema = structuredClone(documentSchema)\n\n  if (Array.isArray(customNodes) && customNodes.length > 0) {\n    customNodes.forEach((nodeObj) => {\n      for (const [nodeName, nodeDefinition] of Object.entries(nodeObj)) {\n        // @ts-ignore\n        schema.definitions[nodeName] = nodeDefinition\n\n        // @ts-ignore\n        const rootNode = schema.definitions['RootNode']\n        if (isObjectSchema(rootNode)) {\n          const children = rootNode.properties?.children\n          const items = children?.items\n          const anyOfList = (items as any)?.anyOf\n\n          if (Array.isArray(anyOfList)) {\n            anyOfList.push({ $ref: `#/definitions/${nodeName}` })\n          }\n        }\n      }\n    })\n  }\n\n  return schema\n}\n"],"names":["isObjectSchema","documentSchema","type","$schema","additionalProperties","definitions","LineBreakNode","properties","enum","version","required","TabNode","TextNode","detail","description","examples","value","direction","format","indent","mode","style","text","TableCellNode","children","items","$ref","colSpan","headerState","width","TableRowNode","height","TableNode","HeadingNode","anyOf","tag","ParagraphNode","textFormat","textStyle","LinkNode","url","ListItemNode","ListNode","listType","QuoteNode","CodeNode","code","language","HorizontalRuleNode","ImageNode","alt","caption","src","RootNode","root","lexicalJsonSchema","customNodes","schema","structuredClone","Array","isArray","length","forEach","nodeObj","nodeName","nodeDefinition","Object","entries","rootNode","anyOfList","push"],"mappings":"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"}