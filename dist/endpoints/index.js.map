{"version":3,"sources":["../../src/endpoints/index.ts"],"sourcesContent":["import type { CollectionSlug, PayloadRequest } from 'payload'\n\nimport * as process from 'node:process'\n\nimport type {\n  ActionMenuItems,\n  Endpoints,\n  PluginConfig,\n  PromptFieldGetterContext,\n} from '../types.js'\n\nimport { defaultPrompts } from '../ai/prompts.js'\nimport {\n  PLUGIN_API_ENDPOINT_GENERATE,\n  PLUGIN_API_ENDPOINT_GENERATE_UPLOAD,\n  PLUGIN_INSTRUCTIONS_TABLE,\n  PLUGIN_NAME,\n} from '../defaults.js'\nimport { asyncHandlebars } from '../libraries/handlebars/asyncHandlebars.js'\nimport { registerEditorHelper } from '../libraries/handlebars/helpers.js'\nimport { handlebarsHelpersMap } from '../libraries/handlebars/helpersMap.js'\nimport { replacePlaceholders } from '../libraries/handlebars/replacePlaceholders.js'\nimport { extractImageData } from '../utilities/extractImageData.js'\nimport { getGenerationModels } from '../utilities/getGenerationModels.js'\n\nconst requireAuthentication = (req: PayloadRequest) => {\n  if (!req.user) {\n    throw new Error('Authentication required. Please log in to use AI features.')\n  }\n  return true\n}\n\nconst checkAccess = async (req: PayloadRequest, pluginConfig: PluginConfig) => {\n  requireAuthentication(req)\n\n  if (pluginConfig.access?.generate) {\n    const hasAccess = await pluginConfig.access.generate({ req })\n    if (!hasAccess) {\n      throw new Error('Insufficient permissions to use AI generation features.')\n    }\n  }\n\n  return true\n}\n\nconst extendContextWithPromptFields = (\n  data: object,\n  ctx: PromptFieldGetterContext,\n  pluginConfig: PluginConfig,\n) => {\n  const { promptFields = [] } = pluginConfig\n  const fieldsMap = new Map(\n    promptFields\n      .filter((f) => !f.collections || f.collections.includes(ctx.collection))\n      .map((f) => [f.name, f]),\n  )\n  return new Proxy(data, {\n    get: (target, prop: string) => {\n      const field = fieldsMap.get(prop as string)\n      if (field?.getter) {\n        const value = field.getter(data, ctx)\n        return Promise.resolve(value).then((v) => new asyncHandlebars.SafeString(v))\n      }\n      // {{prop}} escapes content by default. Here we make sure it won't be escaped.\n      const value = typeof target === \"object\" ? (target as any)[prop] : undefined\n      return typeof value === 'string' ? new asyncHandlebars.SafeString(value) : value\n    },\n    // It's used by the handlebars library to determine if the property is enumerable\n    getOwnPropertyDescriptor: (target, prop) => {\n      const field = fieldsMap.get(prop as string)\n      if (field) {\n        return {\n          configurable: true,\n          enumerable: true,\n        }\n      }\n      return Object.getOwnPropertyDescriptor(target, prop)\n    },\n    has: (target, prop) => {\n      return fieldsMap.has(prop as string) || (target && prop in target)\n    },\n    ownKeys: (target) => {\n      return [...fieldsMap.keys(), ...Object.keys(target || {})]\n    },\n  })\n}\n\nconst assignPrompt = async (\n  action: ActionMenuItems,\n  {\n    type,\n    actionParams,\n    collection,\n    context,\n    field,\n    layout,\n    locale,\n    pluginConfig,\n    systemPrompt = '',\n    template,\n  }: {\n    actionParams: Record<any, any>\n    collection: CollectionSlug\n    context: object\n    field: string\n    layout: string\n    locale: string\n    pluginConfig: PluginConfig\n    systemPrompt: string\n    template: string\n    type: string\n  },\n) => {\n  const extendedContext = extendContextWithPromptFields(context, { type, collection }, pluginConfig)\n  const prompt = await replacePlaceholders(template, extendedContext)\n  const toLexicalHTML = type === 'richText' ? handlebarsHelpersMap.toHTML.name : ''\n\n  const assignedPrompts = {\n    layout: type === 'richText' ? layout : undefined,\n    prompt,\n    //TODO: Define only once on a collection level\n    system: type === 'richText' ? systemPrompt : undefined,\n  }\n\n  if (action === 'Compose') {\n    if (locale && locale !== 'en') {\n      /**\n       * NOTE: Avoid using the \"system prompt\" for setting the output language,\n       * as it causes quotation marks to appear in the output (Currently only tested with openai models).\n       * Appending the language instruction directly to the prompt resolves this issue.\n       **/\n      assignedPrompts.prompt += `\n    ---  \n    OUTPUT LANGUAGE: ${locale}\n    `\n    }\n\n    return assignedPrompts\n  }\n\n  const prompts = [...(pluginConfig.prompts || []), ...defaultPrompts]\n  const foundPrompt = prompts.find((p) => p.name === action)\n  const getLayout = foundPrompt?.layout\n  const getSystemPrompt = foundPrompt?.system\n\n  let updatedLayout = layout\n  if (getLayout) {\n    updatedLayout = getLayout()\n  }\n\n  const system = getSystemPrompt\n    ? getSystemPrompt({\n        ...(actionParams || {}),\n        prompt,\n        systemPrompt,\n      })\n    : ''\n\n  return {\n    layout: updatedLayout,\n    // TODO: revisit this toLexicalHTML\n    prompt: await replacePlaceholders(`{{${toLexicalHTML} ${field}}}`, extendedContext),\n    system,\n  }\n}\n\nexport const endpoints: (pluginConfig: PluginConfig) => Endpoints = (pluginConfig) =>\n  ({\n    textarea: {\n      //TODO:  This is the main endpoint for generating content - its just needs to be renamed to 'generate' or something.\n      handler: async (req: PayloadRequest) => {\n        try {\n          // Check authentication and authorization first\n          await checkAccess(req, pluginConfig)\n\n          const data = await req.json?.()\n\n          const { locale = 'en', options } = data\n          const { action, actionParams, instructionId } = options\n          const contextData = data.doc\n\n          if (!instructionId) {\n            throw new Error(\n              `Instruction ID is required for \"${PLUGIN_NAME}\" to work, please check your configuration, or try again`,\n            )\n          }\n\n          // Verify user has access to the specific instruction\n          const instructions = await req.payload.findByID({\n            id: instructionId,\n            collection: PLUGIN_INSTRUCTIONS_TABLE,\n            req, // Pass req to ensure access control is applied\n          })\n\n          const { prompt: promptTemplate = '' } = instructions\n\n          const schemaPath = instructions['schema-path'] as string\n          const [collectionName, fieldName] = schemaPath?.split('.') || []\n\n          registerEditorHelper(req.payload, schemaPath)\n\n          const { defaultLocale, locales = [] } = req.payload.config.localization || {}\n          const localeData = locales.find((l) => {\n            return l.code === locale\n          })\n\n          let localeInfo = locale\n          if (\n            localeData &&\n            defaultLocale &&\n            localeData.label &&\n            typeof localeData.label === 'object' &&\n            defaultLocale in localeData.label\n          ) {\n            localeInfo = localeData.label[defaultLocale]\n          }\n\n          const models = getGenerationModels(pluginConfig)\n          const model =\n            models && Array.isArray(models)\n              ? models.find((model) => model.id === instructions['model-id'])\n              : undefined\n\n          if (!model) {\n            throw new Error('Model not found')\n          }\n\n          // @ts-ignore\n          const settingsName = model && model.settings ? model.settings.name : undefined\n          if (!settingsName) {\n            req.payload.logger.error('— AI Plugin: Error fetching settings name!')\n          }\n\n          const modelOptions = settingsName ? instructions[settingsName] || {} : {}\n\n          const prompts = await assignPrompt(action, {\n            type: String(instructions['field-type']),\n            actionParams,\n            collection: collectionName,\n            context: contextData,\n            field: fieldName || '',\n            layout: instructions.layout,\n            locale: localeInfo,\n            pluginConfig,\n            systemPrompt: instructions.system,\n            template: String(promptTemplate),\n          })\n\n          if (pluginConfig.debugging) {\n            req.payload.logger.info(\n              { prompts },\n              `— AI Plugin: Executing text prompt on ${schemaPath} using ${model.id}`,\n            )\n          }\n\n          return model.handler?.(prompts.prompt, {\n            ...modelOptions,\n            layout: prompts.layout,\n            locale: localeInfo,\n            system: prompts.system,\n          })\n        } catch (error) {\n          req.payload.logger.error(error, 'Error generating content: ')\n          const message =\n            error && typeof error === 'object' && 'message' in error\n              ? (error as any).message\n              : String(error)\n          return new Response(JSON.stringify({ error: message }), {\n            headers: { 'Content-Type': 'application/json' },\n            status:\n              message.includes('Authentication required') ||\n              message.includes('Insufficient permissions')\n                ? 401\n                : 500,\n          })\n        }\n      },\n      method: 'post',\n      path: PLUGIN_API_ENDPOINT_GENERATE,\n    },\n    upload: {\n      handler: async (req: PayloadRequest) => {\n        try {\n          // Check authentication and authorization first\n          await checkAccess(req, pluginConfig)\n\n          const data = await req.json?.()\n\n          const { collectionSlug, documentId, options } = data\n          const { instructionId } = options\n          let docData = {}\n\n          if (documentId) {\n            try {\n              docData = await req.payload.findByID({\n                id: documentId,\n                collection: collectionSlug,\n                draft: true,\n                req, // Pass req to ensure access control is applied\n              })\n            } catch (e) {\n              req.payload.logger.error(\n                e,\n                '— AI Plugin: Error fetching document, you should try again after enabling drafts for this collection',\n              )\n            }\n          }\n\n          const contextData = {\n            ...data.doc,\n            ...docData,\n          }\n\n          let instructions: Record<string, any> = { images: [], 'model-id': '', prompt: '' }\n\n          if (instructionId) {\n            // Verify user has access to the specific instruction\n            instructions = await req.payload.findByID({\n              id: instructionId,\n              collection: PLUGIN_INSTRUCTIONS_TABLE,\n              req, // Pass req to ensure access control is applied\n            })\n          }\n\n          const { images: sampleImages = [], prompt: promptTemplate = '' } = instructions\n          const schemaPath = instructions['schema-path']\n\n          registerEditorHelper(req.payload, schemaPath)\n\n          const extendedContext = extendContextWithPromptFields(\n            contextData,\n            { type: instructions['field-type'], collection: collectionSlug },\n            pluginConfig,\n          )\n          const text = await replacePlaceholders(promptTemplate, extendedContext)\n          const modelId = instructions['model-id']\n          const uploadCollectionSlug = instructions['relation-to']\n\n          const images = [...extractImageData(text), ...sampleImages]\n\n          const editImages = []\n          for (const img of images) {\n            const serverURL =\n            req.payload.config?.serverURL ||\n            process.env.SERVER_URL ||\n            process.env.NEXT_PUBLIC_SERVER_URL\n\n            let url = img.image.thumbnailURL || img.image.url\n            if (!url.startsWith('http')) {\n              url = `${serverURL}${url}`\n            }\n\n            try {\n\n              const response = await fetch(url, {\n                headers: {\n                  //TODO: Further testing needed or so find a proper way.\n                  Authorization: `Bearer ${req.headers.get('Authorization')?.split('Bearer ')[1] || ''}`,\n                },\n                method: 'GET',\n              })\n\n              const blob = await response.blob()\n              editImages.push({\n                name: img.image.name,\n                type: img.image.type,\n                data: blob,\n                size: blob.size,\n                url,\n              })\n            } catch (e) {\n              req.payload.logger.error(e, `Error fetching reference image ${url}`)\n              throw Error(\n                \"We couldn't fetch the images. Please ensure the images are accessible and hosted publicly.\",\n              )\n            }\n          }\n\n          const modelsUpload = getGenerationModels(pluginConfig)\n          const model =\n            modelsUpload && Array.isArray(modelsUpload)\n              ? modelsUpload.find((model) => model.id === modelId)\n              : undefined\n\n          if (!model) {\n            throw new Error('Model not found')\n          }\n\n          // @ts-ignore\n          const settingsName = model && model.settings ? model.settings.name : undefined\n          if (!settingsName) {\n            req.payload.logger.error('— AI Plugin: Error fetching settings name!')\n          }\n\n          let modelOptions = settingsName ? instructions[settingsName] || {} : {}\n          modelOptions = {\n            ...modelOptions,\n            images: editImages,\n          }\n\n          if (pluginConfig.debugging) {\n            req.payload.logger.info(\n              { text },\n              `— AI Plugin: Executing image prompt using ${model.id}`,\n            )\n          }\n\n          const result = await model.handler?.(text, modelOptions)\n          let assetData: { alt?: string; id: number | string }\n\n          if (typeof pluginConfig.mediaUpload === 'function') {\n            assetData = await pluginConfig.mediaUpload(result, {\n              collection: uploadCollectionSlug,\n              request: req,\n            })\n          } else {\n            assetData = await req.payload.create({\n              collection: uploadCollectionSlug,\n              data: result.data,\n              file: result.file,\n              req, // Pass req to ensure access control is applied\n            })\n          }\n\n          if (!assetData.id) {\n            req.payload.logger.error(\n              'Error uploading generated media, is your media upload function correct?',\n            )\n            throw new Error('Error uploading generated media!')\n          }\n\n          return new Response(\n            JSON.stringify({\n              result: {\n                id: assetData.id,\n                alt: assetData.alt,\n              },\n            }),\n          )\n        } catch (error) {\n          req.payload.logger.error(error, 'Error generating upload: ')\n          const message =\n            error && typeof error === 'object' && 'message' in error\n              ? (error as any).message\n              : String(error)\n          return new Response(JSON.stringify({ error: message }), {\n            headers: { 'Content-Type': 'application/json' },\n            status:\n              message.includes('Authentication required') ||\n              message.includes('Insufficient permissions')\n                ? 401\n                : 500,\n          })\n        }\n      },\n      method: 'post',\n      path: PLUGIN_API_ENDPOINT_GENERATE_UPLOAD,\n    },\n  }) satisfies Endpoints\n"],"names":["process","defaultPrompts","PLUGIN_API_ENDPOINT_GENERATE","PLUGIN_API_ENDPOINT_GENERATE_UPLOAD","PLUGIN_INSTRUCTIONS_TABLE","PLUGIN_NAME","asyncHandlebars","registerEditorHelper","handlebarsHelpersMap","replacePlaceholders","extractImageData","getGenerationModels","requireAuthentication","req","user","Error","checkAccess","pluginConfig","access","generate","hasAccess","extendContextWithPromptFields","data","ctx","promptFields","fieldsMap","Map","filter","f","collections","includes","collection","map","name","Proxy","get","target","prop","field","getter","value","Promise","resolve","then","v","SafeString","undefined","getOwnPropertyDescriptor","configurable","enumerable","Object","has","ownKeys","keys","assignPrompt","action","type","actionParams","context","layout","locale","systemPrompt","template","extendedContext","prompt","toLexicalHTML","toHTML","assignedPrompts","system","prompts","foundPrompt","find","p","getLayout","getSystemPrompt","updatedLayout","endpoints","textarea","handler","json","options","instructionId","contextData","doc","instructions","payload","findByID","id","promptTemplate","schemaPath","collectionName","fieldName","split","defaultLocale","locales","config","localization","localeData","l","code","localeInfo","label","models","model","Array","isArray","settingsName","settings","logger","error","modelOptions","String","debugging","info","message","Response","JSON","stringify","headers","status","method","path","upload","collectionSlug","documentId","docData","draft","e","images","sampleImages","text","modelId","uploadCollectionSlug","editImages","img","serverURL","env","SERVER_URL","NEXT_PUBLIC_SERVER_URL","url","image","thumbnailURL","startsWith","response","fetch","Authorization","blob","push","size","modelsUpload","result","assetData","mediaUpload","request","create","file","alt"],"mappings":"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"}