{"version":3,"sources":["../../src/endpoints/index.ts"],"sourcesContent":["import type { SerializedEditorState } from 'lexical'\nimport type { BasePayload, PayloadRequest } from 'payload'\n\nimport Handlebars from 'handlebars'\nimport asyncHelpers from 'handlebars-async-helpers'\n\nimport type { ActionMenuItems, Endpoints } from '../types.js'\n\nimport { GenerationModels } from '../ai/models/index.js'\nimport { defaultPrompts } from '../ai/prompts.js'\nimport {\n  PLUGIN_API_ENDPOINT_GENERATE,\n  PLUGIN_API_ENDPOINT_GENERATE_UPLOAD,\n  PLUGIN_INSTRUCTIONS_TABLE,\n} from '../defaults.js'\nimport { getFieldBySchemaPath } from '../utilities/getFieldBySchemaPath.js'\nimport { lexicalToHTML } from '../utilities/lexicalToHTML.js'\nimport { lexicalSchema } from '../ai/editor/lexical.schema.js'\n// import { DocumentSchema } from '../ai/editor/lexical.schema.js'\n\nconst asyncHandlebars = asyncHelpers(Handlebars)\n\nconst replacePlaceholders = (prompt: string, values: object) => {\n  return asyncHandlebars.compile(prompt, { trackIds: true })(values)\n}\n\nconst assignPrompt = async (\n  action: ActionMenuItems,\n  {\n    type,\n    actionParams,\n    context,\n    field,\n    systemPrompt = '',\n    template,\n  }: {\n    actionParams: unknown\n    context: object\n    field: string\n    systemPrompt: string\n    template: string\n    type: string\n  },\n) => {\n  const prompt = await replacePlaceholders(template, context)\n\n  const toLexicalHTML = type === 'richText' ? 'toLexicalHTML' : ''\n\n  const assignedPrompts = {\n    prompt,\n    system: systemPrompt,\n  }\n\n  if (action === 'Compose') {\n    return assignedPrompts\n  }\n\n  const { system: getSystemPrompt } = defaultPrompts.find((p) => p.name === action)\n\n  return {\n    prompt: await replacePlaceholders(`{{${toLexicalHTML} ${field}}}`, context),\n    system: getSystemPrompt(prompt, systemPrompt, (actionParams || '') as string),\n  }\n}\n\nconst registerEditorHelper = (payload, schemaPath) => {\n  //TODO: add autocomplete ability using handlebars template on PromptEditorField and include custom helpers in dropdown\n\n  let fieldInfo = getFieldInfo(payload.collections, schemaPath)\n  const schemaPathChunks = schemaPath.split('.')\n\n  asyncHandlebars.registerHelper(\n    'toLexicalHTML',\n    async function (content: SerializedEditorState, options) {\n      const collectionSlug = schemaPathChunks[0]\n      const { ids } = options\n      for (const id of ids) {\n        //TODO: Find a better to get schemaPath of defined field in prompt editor\n        const path = `${collectionSlug}.${id}`\n        fieldInfo = getFieldInfo(payload.collections, path)\n      }\n\n      const html = await lexicalToHTML(content, fieldInfo.editor?.editorConfig)\n      return new asyncHandlebars.SafeString(html)\n    },\n  )\n}\n\nconst getFieldInfo = (collections: BasePayload['collections'], schemaPath: string) => {\n  let fieldInfo = null\n  //TODO: Only run below for enabled collections\n  for (const collectionsKey in collections) {\n    const collection = collections[collectionsKey]\n    fieldInfo = getFieldBySchemaPath(collection.config, schemaPath)\n    if (fieldInfo) {\n      return fieldInfo\n    }\n  }\n}\n\nexport const endpoints: Endpoints = {\n  textarea: {\n    handler: async (req: PayloadRequest) => {\n      const data = await req.json?.()\n\n      const { locale = 'en', options } = data\n      const { action, actionParams, instructionId } = options\n      const contextData = data.doc\n\n      let instructions = { 'model-id': '', prompt: '' }\n      const { collections } = req.payload.config\n      const collection = collections.find(\n        (collection) => collection.slug === PLUGIN_INSTRUCTIONS_TABLE,\n      )\n\n      const { editorConfig: { schema: editorSchema = lexicalSchema() } = {} } =\n        collection.custom || {}\n\n      console.log('editorSchema : ', editorSchema)\n\n      if (instructionId) {\n        // @ts-expect-error\n        instructions = await req.payload.findByID({\n          id: instructionId,\n          collection: PLUGIN_INSTRUCTIONS_TABLE,\n        })\n      }\n\n      const { prompt: promptTemplate = '' } = instructions\n\n      const schemaPath = instructions['schema-path']\n      const fieldName = schemaPath?.split('.').pop()\n\n      registerEditorHelper(req.payload, schemaPath)\n\n      const { defaultLocale, locales = [] } = req.payload.config.localization || {}\n      const localeData = locales.find((l) => {\n        return l.code === locale\n      })\n\n      const localeInfo = localeData?.label[defaultLocale] || locale\n\n      //TODO: remove this\n      const opt = {\n        locale: localeInfo,\n        modelId: instructions['model-id'],\n      }\n\n      const model = GenerationModels.find((model) => model.id === opt.modelId)\n      const settingsName = model.settings?.name\n      const modelOptions = instructions[settingsName] || {}\n\n      const prompts = await assignPrompt(action, {\n        type: instructions['field-type'],\n        actionParams,\n        context: contextData,\n        field: fieldName,\n        systemPrompt: modelOptions.system,\n        template: promptTemplate,\n      })\n\n      console.log('Running handler with prompts:', prompts)\n      return model\n        .handler?.(prompts.prompt, {\n          ...modelOptions,\n          ...opt,\n          system: prompts.system,\n          editorSchema,\n        })\n        .catch((error) => {\n          console.error('Error: endpoint - generating text:', error)\n          return new Response(JSON.stringify(error.message), { status: 500 })\n        })\n    },\n    method: 'post',\n    path: PLUGIN_API_ENDPOINT_GENERATE,\n  },\n  upload: {\n    handler: async (req: PayloadRequest) => {\n      const data = await req.json?.()\n\n      const { options } = data\n      const { instructionId, uploadCollectionSlug } = options\n      const contextData = data.doc\n\n      let instructions = { 'model-id': '', prompt: '' }\n\n      if (instructionId) {\n        // @ts-expect-error\n        instructions = await req.payload.findByID({\n          id: instructionId,\n          collection: PLUGIN_INSTRUCTIONS_TABLE,\n        })\n      }\n\n      const { prompt: promptTemplate = '' } = instructions\n      const schemaPath = instructions['schema-path']\n\n      registerEditorHelper(req.payload, schemaPath)\n\n      const text = await replacePlaceholders(promptTemplate, contextData)\n      const modelId = instructions['model-id']\n      console.log('prompt text:', text)\n\n      const model = GenerationModels.find((model) => model.id === modelId)\n      const settingsName = model.settings?.name\n      const modelOptions = instructions[settingsName] || {}\n      console.log('modelOptions', modelOptions)\n\n      const result = await model.handler?.(text, modelOptions)\n\n      const assetData = await req.payload.create({\n        collection: uploadCollectionSlug,\n        data: result.data,\n        file: result.file,\n      })\n\n      console.log('assetData', assetData)\n\n      return new Response(\n        JSON.stringify({\n          result: {\n            id: assetData.id,\n            alt: assetData.alt,\n          },\n        }),\n      )\n    },\n    method: 'post',\n    path: PLUGIN_API_ENDPOINT_GENERATE_UPLOAD,\n  },\n}\n"],"names":["Handlebars","asyncHelpers","GenerationModels","defaultPrompts","PLUGIN_API_ENDPOINT_GENERATE","PLUGIN_API_ENDPOINT_GENERATE_UPLOAD","PLUGIN_INSTRUCTIONS_TABLE","getFieldBySchemaPath","lexicalToHTML","lexicalSchema","asyncHandlebars","replacePlaceholders","prompt","values","compile","trackIds","assignPrompt","action","type","actionParams","context","field","systemPrompt","template","toLexicalHTML","assignedPrompts","system","getSystemPrompt","find","p","name","registerEditorHelper","payload","schemaPath","fieldInfo","getFieldInfo","collections","schemaPathChunks","split","registerHelper","content","options","collectionSlug","ids","id","path","html","editor","editorConfig","SafeString","collectionsKey","collection","config","endpoints","textarea","handler","req","data","json","locale","instructionId","contextData","doc","instructions","slug","schema","editorSchema","custom","console","log","findByID","promptTemplate","fieldName","pop","defaultLocale","locales","localization","localeData","l","code","localeInfo","label","opt","modelId","model","settingsName","settings","modelOptions","prompts","catch","error","Response","JSON","stringify","message","status","method","upload","uploadCollectionSlug","text","result","assetData","create","file","alt"],"mappings":"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"}