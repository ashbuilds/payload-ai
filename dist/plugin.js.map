{"version":3,"sources":["../src/plugin.ts"],"sourcesContent":["import type { Config } from 'payload'\nimport { deepMerge } from 'payload/shared'\n\nimport type { PluginConfig } from './types.js'\n\nimport { Instructions } from './collections/Instructions.js'\nimport { PLUGIN_INSTRUCTIONS_MAP_GLOBAL, PLUGIN_NAME } from './defaults.js'\nimport { endpoints } from './endpoints/index.js'\nimport { init } from './init.js'\nimport { InstructionsProvider } from './providers/InstructionsProvider/index.js'\nimport { translations } from './translations/index.js'\nimport { updateFieldsConfig } from './utilities/updateFieldsConfig.js'\nimport { lexicalSchema } from './ai/editor/lexical.schema.js'\n\nimport { zodToJsonSchema } from 'zod-to-json-schema'\n\nconst payloadAiPlugin =\n  (pluginConfig: PluginConfig) =>\n  (incomingConfig: Config): Config => {\n    // Inject editor schema to config, so that it can be accessed when /textarea endpoint will hit\n    const zodLexicalSchema = lexicalSchema(pluginConfig.editorConfig?.nodes)\n\n    if (pluginConfig.debugging) {\n      Instructions.admin.hidden = false\n    }\n\n    Instructions.admin.custom = {\n      ...(Instructions.admin.custom || {}),\n      [PLUGIN_NAME]: {\n        editorConfig: {\n          // Used in admin client for useObject hook\n          schema: zodToJsonSchema(zodLexicalSchema),\n        },\n      },\n    }\n\n    Instructions.custom = {\n      ...(Instructions.custom || {}),\n      [PLUGIN_NAME]: {\n        editorConfig: {\n          // Used in textarea endpoint for llm\n          schema: zodLexicalSchema,\n        },\n      },\n    }\n\n    const collections = [...(incomingConfig.collections ?? []), Instructions]\n    const { collections: collectionSlugs = [] } = pluginConfig\n\n    let collectionsFieldPathMap = {}\n\n    incomingConfig.admin.components.providers = [\n      ...(incomingConfig.admin.components.providers ?? []),\n      InstructionsProvider,\n    ]\n\n    const updatedConfig: Config = {\n      ...incomingConfig,\n      collections: collections.map((collection) => {\n        if (collectionSlugs[collection.slug]) {\n          const { schemaPathMap, updatedCollectionConfig } = updateFieldsConfig(collection)\n          collectionsFieldPathMap = {\n            ...collectionsFieldPathMap,\n            ...schemaPathMap,\n          }\n          return updatedCollectionConfig\n        }\n\n        return collection\n      }),\n      endpoints: [...(incomingConfig.endpoints ?? []), endpoints.textarea, endpoints.upload],\n      globals: [\n        ...incomingConfig.globals,\n        {\n          slug: PLUGIN_INSTRUCTIONS_MAP_GLOBAL,\n          access: {\n            read: () => true,\n          },\n          admin: {\n            hidden: !pluginConfig.debugging,\n          },\n          fields: [\n            {\n              name: 'map',\n              type: 'json',\n            },\n          ],\n        },\n      ],\n      i18n: {\n        ...incomingConfig.i18n,\n        translations: {\n          ...deepMerge(translations, incomingConfig.i18n?.translations),\n        },\n      },\n    }\n\n    updatedConfig.onInit = async (payload) => {\n      if (incomingConfig.onInit) await incomingConfig.onInit(payload)\n\n      await init(payload, collectionsFieldPathMap).catch((error) => {\n        payload.logger.error(`â€” AI Plugin: Initialization Error: ${error}`)\n      })\n    }\n\n    return updatedConfig\n  }\n\nexport { payloadAiPlugin }\n"],"names":["deepMerge","Instructions","PLUGIN_INSTRUCTIONS_MAP_GLOBAL","PLUGIN_NAME","endpoints","init","InstructionsProvider","translations","updateFieldsConfig","lexicalSchema","zodToJsonSchema","payloadAiPlugin","pluginConfig","incomingConfig","zodLexicalSchema","editorConfig","nodes","debugging","admin","hidden","custom","schema","collections","collectionSlugs","collectionsFieldPathMap","components","providers","updatedConfig","map","collection","slug","schemaPathMap","updatedCollectionConfig","textarea","upload","globals","access","read","fields","name","type","i18n","onInit","payload","catch","error","logger"],"mappings":"AACA,SAASA,SAAS,QAAQ,iBAAgB;AAI1C,SAASC,YAAY,QAAQ,gCAA+B;AAC5D,SAASC,8BAA8B,EAAEC,WAAW,QAAQ,gBAAe;AAC3E,SAASC,SAAS,QAAQ,uBAAsB;AAChD,SAASC,IAAI,QAAQ,YAAW;AAChC,SAASC,oBAAoB,QAAQ,4CAA2C;AAChF,SAASC,YAAY,QAAQ,0BAAyB;AACtD,SAASC,kBAAkB,QAAQ,oCAAmC;AACtE,SAASC,aAAa,QAAQ,gCAA+B;AAE7D,SAASC,eAAe,QAAQ,qBAAoB;AAEpD,MAAMC,kBACJ,CAACC,eACD,CAACC;QACC,8FAA8F;QAC9F,MAAMC,mBAAmBL,cAAcG,aAAaG,YAAY,EAAEC;QAElE,IAAIJ,aAAaK,SAAS,EAAE;YAC1BhB,aAAaiB,KAAK,CAACC,MAAM,GAAG;QAC9B;QAEAlB,aAAaiB,KAAK,CAACE,MAAM,GAAG;YAC1B,GAAInB,aAAaiB,KAAK,CAACE,MAAM,IAAI,CAAC,CAAC;YACnC,CAACjB,YAAY,EAAE;gBACbY,cAAc;oBACZ,0CAA0C;oBAC1CM,QAAQX,gBAAgBI;gBAC1B;YACF;QACF;QAEAb,aAAamB,MAAM,GAAG;YACpB,GAAInB,aAAamB,MAAM,IAAI,CAAC,CAAC;YAC7B,CAACjB,YAAY,EAAE;gBACbY,cAAc;oBACZ,oCAAoC;oBACpCM,QAAQP;gBACV;YACF;QACF;QAEA,MAAMQ,cAAc;eAAKT,eAAeS,WAAW,IAAI,EAAE;YAAGrB;SAAa;QACzE,MAAM,EAAEqB,aAAaC,kBAAkB,EAAE,EAAE,GAAGX;QAE9C,IAAIY,0BAA0B,CAAC;QAE/BX,eAAeK,KAAK,CAACO,UAAU,CAACC,SAAS,GAAG;eACtCb,eAAeK,KAAK,CAACO,UAAU,CAACC,SAAS,IAAI,EAAE;YACnDpB;SACD;QAED,MAAMqB,gBAAwB;YAC5B,GAAGd,cAAc;YACjBS,aAAaA,YAAYM,GAAG,CAAC,CAACC;gBAC5B,IAAIN,eAAe,CAACM,WAAWC,IAAI,CAAC,EAAE;oBACpC,MAAM,EAAEC,aAAa,EAAEC,uBAAuB,EAAE,GAAGxB,mBAAmBqB;oBACtEL,0BAA0B;wBACxB,GAAGA,uBAAuB;wBAC1B,GAAGO,aAAa;oBAClB;oBACA,OAAOC;gBACT;gBAEA,OAAOH;YACT;YACAzB,WAAW;mBAAKS,eAAeT,SAAS,IAAI,EAAE;gBAAGA,UAAU6B,QAAQ;gBAAE7B,UAAU8B,MAAM;aAAC;YACtFC,SAAS;mBACJtB,eAAesB,OAAO;gBACzB;oBACEL,MAAM5B;oBACNkC,QAAQ;wBACNC,MAAM,IAAM;oBACd;oBACAnB,OAAO;wBACLC,QAAQ,CAACP,aAAaK,SAAS;oBACjC;oBACAqB,QAAQ;wBACN;4BACEC,MAAM;4BACNC,MAAM;wBACR;qBACD;gBACH;aACD;YACDC,MAAM;gBACJ,GAAG5B,eAAe4B,IAAI;gBACtBlC,cAAc;oBACZ,GAAGP,UAAUO,cAAcM,eAAe4B,IAAI,EAAElC,aAAa;gBAC/D;YACF;QACF;QAEAoB,cAAce,MAAM,GAAG,OAAOC;YAC5B,IAAI9B,eAAe6B,MAAM,EAAE,MAAM7B,eAAe6B,MAAM,CAACC;YAEvD,MAAMtC,KAAKsC,SAASnB,yBAAyBoB,KAAK,CAAC,CAACC;gBAClDF,QAAQG,MAAM,CAACD,KAAK,CAAC,CAAC,mCAAmC,EAAEA,MAAM,CAAC;YACpE;QACF;QAEA,OAAOlB;IACT;AAEF,SAAShB,eAAe,GAAE"}