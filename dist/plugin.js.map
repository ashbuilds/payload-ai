{"version":3,"sources":["../src/plugin.ts"],"sourcesContent":["import type { CollectionConfig, Config, GlobalConfig } from 'payload'\n\nimport { deepMerge } from 'payload/shared'\n\nimport type { PluginConfig } from './types.js'\n\nimport { defaultGenerationModels } from './ai/models/index.js'\nimport { lexicalJsonSchema } from './ai/schemas/lexicalJsonSchema.js'\nimport { instructionsCollection } from './collections/Instructions.js'\nimport { PLUGIN_NAME } from './defaults.js'\nimport { fetchFields } from './endpoints/fetchFields.js'\nimport { endpoints } from './endpoints/index.js'\nimport { init } from './init.js'\nimport { translations } from './translations/index.js'\nimport { getGenerationModels } from './utilities/getGenerationModels.js'\nimport { isPluginActivated } from './utilities/isPluginActivated.js'\nimport { updateFieldsConfig } from './utilities/updateFieldsConfig.js'\n\nconst defaultPluginConfig: PluginConfig = {\n  access: {\n    generate: ({ req }) => !!req.user,\n    settings: ({ req }) => !!req.user,\n  },\n  collections: {},\n  disableSponsorMessage: false,\n  generatePromptOnInit: true,\n  generationModels: defaultGenerationModels,\n}\n\nconst securityMessage = `\n╔═══════════════════════════════════════════════════════════════╗\n║                    SECURITY NOTICE                            ║\n║                                                               ║\n║  The AI Plugin now requires authentication by default.        ║\n║  All AI features are restricted to authenticated users.       ║\n║                                                               ║\n║  To customize access control, configure the 'access' option   ║\n║  in your plugin settings. See documentation for details.      ║\n║                                                               ║\n║  If you need different access patterns, please configure      ║\n║  them explicitly in your plugin configuration.                ║\n╚═══════════════════════════════════════════════════════════════╝\n`\n\nconst payloadAiPlugin =\n  (pluginConfig: PluginConfig) =>\n  (incomingConfig: Config): Config => {\n    pluginConfig = {\n      ...defaultPluginConfig,\n      ...pluginConfig,\n      access: {\n        ...defaultPluginConfig.access,\n        ...pluginConfig.access,\n      },\n    }\n\n    pluginConfig.generationModels = getGenerationModels(pluginConfig)\n\n    const isActivated = isPluginActivated(pluginConfig)\n    let updatedConfig: Config = { ...incomingConfig }\n    let collectionsFieldPathMap = {}\n\n    if (isActivated) {\n      const Instructions = instructionsCollection(pluginConfig)\n      // Inject editor schema to config, so that it can be accessed when /textarea endpoint will hit\n      const lexicalSchema = lexicalJsonSchema(pluginConfig.editorConfig?.nodes)\n\n      Instructions.admin = {\n        ...Instructions.admin,\n      }\n\n      if (pluginConfig.debugging) {\n        Instructions.admin.hidden = false\n      }\n\n      Instructions.admin.custom = {\n        ...(Instructions.admin.custom || {}),\n        [PLUGIN_NAME]: {\n          editorConfig: {\n            // Used in admin client for useObject hook\n            schema: lexicalSchema,\n          },\n        },\n      }\n\n      const collections = [...(incomingConfig.collections ?? []), Instructions]\n      const globals = [...(incomingConfig.globals ?? [])]\n      const { collections: collectionSlugs, globals: globalsSlugs } = pluginConfig\n\n      const { components: { providers = [] } = {} } = incomingConfig.admin || {}\n      const updatedProviders = [\n        ...(providers ?? []),\n        {\n          path: '@ai-stack/payloadcms/client#InstructionsProvider',\n        },\n      ]\n\n      incomingConfig.admin = {\n        ...(incomingConfig.admin || {}),\n        components: {\n          ...(incomingConfig.admin?.components ?? {}),\n          providers: updatedProviders,\n        },\n      }\n\n      const pluginEndpoints = endpoints(pluginConfig)\n      updatedConfig = {\n        ...incomingConfig,\n        collections: collections.map((collection) => {\n          if (collectionSlugs[collection.slug]) {\n            const { schemaPathMap, updatedCollectionConfig } = updateFieldsConfig(collection)\n            collectionsFieldPathMap = {\n              ...collectionsFieldPathMap,\n              ...schemaPathMap,\n            }\n            return updatedCollectionConfig as CollectionConfig\n          }\n\n          return collection\n        }),\n        endpoints: [\n          ...(incomingConfig.endpoints ?? []),\n          pluginEndpoints.textarea,\n          pluginEndpoints.upload,\n          fetchFields(pluginConfig),\n        ],\n        globals: globals.map((global) => {\n          if (globalsSlugs && globalsSlugs[global.slug]) {\n            const { schemaPathMap, updatedCollectionConfig } = updateFieldsConfig(global)\n            collectionsFieldPathMap = {\n              ...collectionsFieldPathMap,\n              ...schemaPathMap,\n            }\n            return updatedCollectionConfig as GlobalConfig\n          }\n\n          return global\n        }),\n        i18n: {\n          ...(incomingConfig.i18n || {}),\n          translations: {\n            ...deepMerge(translations, incomingConfig.i18n?.translations ?? {}),\n          },\n        },\n      }\n    }\n\n    updatedConfig.onInit = async (payload) => {\n      if (incomingConfig.onInit) await incomingConfig.onInit(payload)\n\n      if (!isActivated) {\n        payload.logger.warn(`— AI Plugin: Not activated. Please verify your environment keys.`)\n        return\n      }\n\n        await init(payload, collectionsFieldPathMap, pluginConfig)\n          .catch((error) => {\n            payload.logger.error(error, `— AI Plugin: Initialization Error`)\n          })\n          .finally(() => {\n            if (!pluginConfig.disableSponsorMessage) {\n              setTimeout(() => {\n                payload.logger.info(securityMessage)\n              }, 1000)\n            }\n          })\n      }\n\n    return updatedConfig\n  }\n\nexport { payloadAiPlugin }\n"],"names":["deepMerge","defaultGenerationModels","lexicalJsonSchema","instructionsCollection","PLUGIN_NAME","fetchFields","endpoints","init","translations","getGenerationModels","isPluginActivated","updateFieldsConfig","defaultPluginConfig","access","generate","req","user","settings","collections","disableSponsorMessage","generatePromptOnInit","generationModels","securityMessage","payloadAiPlugin","pluginConfig","incomingConfig","isActivated","updatedConfig","collectionsFieldPathMap","Instructions","lexicalSchema","editorConfig","nodes","admin","debugging","hidden","custom","schema","globals","collectionSlugs","globalsSlugs","components","providers","updatedProviders","path","pluginEndpoints","map","collection","slug","schemaPathMap","updatedCollectionConfig","textarea","upload","global","i18n","onInit","payload","logger","warn","catch","error","finally","setTimeout","info"],"mappings":"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"}