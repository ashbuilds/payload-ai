{"version":3,"sources":["../../../src/providers/InstructionsProvider/InstructionsProvider.tsx"],"sourcesContent":["'use client'\n\n\nimport { useAuth, useConfig } from '@payloadcms/ui'\nimport React, { useEffect, useState } from 'react'\n\nimport type { SerializedPromptField } from '../../types.js'\n\nimport { PLUGIN_FETCH_FIELDS_ENDPOINT } from '../../defaults.js'\nimport { InstructionsContext } from './context.js'\n\n\nexport const InstructionsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [instructions, setInstructionsState] = useState({})\n  const [promptFields, setPromptFields] = useState<SerializedPromptField[]>([])\n  const [activeCollection, setActiveCollection] = useState('')\n  const [isConfigAllowed, setIsConfigAllowed] = useState(false)\n  const [enabledLanguages, setEnabledLanguages] = useState<string[]>()\n  const [debugging, setDebugging] = useState(false)\n  const { user } = useAuth()\n\n  const { config } = useConfig()\n  const {\n    routes: { api },\n    serverURL,\n  } = config\n\n  // This is here because each field have separate instructions and\n  // their ID is needed to edit them for Drawer\n  useEffect(() => {\n    fetch(`${serverURL}${api}${PLUGIN_FETCH_FIELDS_ENDPOINT}`)\n      .then(async (res) => {\n        await res.json().then((data) => {\n          setIsConfigAllowed(data?.isConfigAllowed || false)\n          setEnabledLanguages(data?.enabledLanguages || [])\n          setInstructionsState(data?.fields || {})\n          setPromptFields(data?.promptFields || [])\n          setDebugging(data?.debugging || false)\n        })\n      })\n      .catch((err) => {\n        console.error('InstructionsProvider:', err)\n      })\n  }, [api, serverURL, user])\n\n  return (\n    <InstructionsContext.Provider\n      value={{\n        activeCollection,\n        debugging,\n        enabledLanguages,\n        hasInstructions: instructions && Object.keys(instructions).length > 0,\n        instructions,\n        isConfigAllowed,\n        promptFields,\n        setActiveCollection,\n      }}\n    >\n      {children}\n    </InstructionsContext.Provider>\n  )\n}\n"],"names":["useAuth","useConfig","React","useEffect","useState","PLUGIN_FETCH_FIELDS_ENDPOINT","InstructionsContext","InstructionsProvider","children","instructions","setInstructionsState","promptFields","setPromptFields","activeCollection","setActiveCollection","isConfigAllowed","setIsConfigAllowed","enabledLanguages","setEnabledLanguages","debugging","setDebugging","user","config","routes","api","serverURL","fetch","then","res","json","data","fields","catch","err","console","error","Provider","value","hasInstructions","Object","keys","length"],"mappings":"AAAA;;AAGA,SAASA,OAAO,EAAEC,SAAS,QAAQ,iBAAgB;AACnD,OAAOC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,QAAO;AAIlD,SAASC,4BAA4B,QAAQ,oBAAmB;AAChE,SAASC,mBAAmB,QAAQ,eAAc;AAGlD,OAAO,MAAMC,uBAAgE,CAAC,EAAEC,QAAQ,EAAE;IACxF,MAAM,CAACC,cAAcC,qBAAqB,GAAGN,SAAS,CAAC;IACvD,MAAM,CAACO,cAAcC,gBAAgB,GAAGR,SAAkC,EAAE;IAC5E,MAAM,CAACS,kBAAkBC,oBAAoB,GAAGV,SAAS;IACzD,MAAM,CAACW,iBAAiBC,mBAAmB,GAAGZ,SAAS;IACvD,MAAM,CAACa,kBAAkBC,oBAAoB,GAAGd;IAChD,MAAM,CAACe,WAAWC,aAAa,GAAGhB,SAAS;IAC3C,MAAM,EAAEiB,IAAI,EAAE,GAAGrB;IAEjB,MAAM,EAAEsB,MAAM,EAAE,GAAGrB;IACnB,MAAM,EACJsB,QAAQ,EAAEC,GAAG,EAAE,EACfC,SAAS,EACV,GAAGH;IAEJ,iEAAiE;IACjE,6CAA6C;IAC7CnB,UAAU;QACRuB,MAAM,GAAGD,YAAYD,MAAMnB,8BAA8B,EACtDsB,IAAI,CAAC,OAAOC;YACX,MAAMA,IAAIC,IAAI,GAAGF,IAAI,CAAC,CAACG;gBACrBd,mBAAmBc,MAAMf,mBAAmB;gBAC5CG,oBAAoBY,MAAMb,oBAAoB,EAAE;gBAChDP,qBAAqBoB,MAAMC,UAAU,CAAC;gBACtCnB,gBAAgBkB,MAAMnB,gBAAgB,EAAE;gBACxCS,aAAaU,MAAMX,aAAa;YAClC;QACF,GACCa,KAAK,CAAC,CAACC;YACNC,QAAQC,KAAK,CAAC,yBAAyBF;QACzC;IACJ,GAAG;QAACT;QAAKC;QAAWJ;KAAK;IAEzB,qBACE,KAACf,oBAAoB8B,QAAQ;QAC3BC,OAAO;YACLxB;YACAM;YACAF;YACAqB,iBAAiB7B,gBAAgB8B,OAAOC,IAAI,CAAC/B,cAAcgC,MAAM,GAAG;YACpEhC;YACAM;YACAJ;YACAG;QACF;kBAECN;;AAGP,EAAC"}