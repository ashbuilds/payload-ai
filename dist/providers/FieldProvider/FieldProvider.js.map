{"version":3,"sources":["../../../src/providers/FieldProvider/FieldProvider.tsx"],"sourcesContent":["import React, { createContext, useEffect } from 'react'\n\nconst initialContext: {\n  path?: string\n  schemaPath?: string\n  type?: string\n} = {\n  type: undefined,\n  path: '',\n  schemaPath: '',\n}\n\nexport const FieldContext = createContext(initialContext)\n\nexport const FieldProvider = ({\n  children,\n  context,\n}: {\n  children: React.ReactNode\n  context: { path: string; schemaPath: unknown; type: unknown }\n}) => {\n  const [type, setType] = React.useState<string>()\n  const [path, setPath] = React.useState<string>()\n  const [schemaPath, setSchemaPath] = React.useState<string>()\n\n  useEffect(() => {\n    if (schemaPath !== context.schemaPath) {\n      setType(context.type as string)\n      setPath(context.path)\n      setSchemaPath(context.schemaPath as string)\n    }\n  }, [schemaPath, context])\n\n  return (\n    <FieldContext.Provider\n      value={{\n        type,\n        path,\n        schemaPath,\n      }}\n    >\n      {children}\n    </FieldContext.Provider>\n  )\n}\n"],"names":["React","createContext","useEffect","initialContext","type","undefined","path","schemaPath","FieldContext","FieldProvider","children","context","setType","useState","setPath","setSchemaPath","Provider","value"],"mappings":";AAAA,OAAOA,SAASC,aAAa,EAAEC,SAAS,QAAQ,QAAO;AAEvD,MAAMC,iBAIF;IACFC,MAAMC;IACNC,MAAM;IACNC,YAAY;AACd;AAEA,OAAO,MAAMC,6BAAeP,cAAcE,gBAAe;AAEzD,OAAO,MAAMM,gBAAgB,CAAC,EAC5BC,QAAQ,EACRC,OAAO,EAIR;IACC,MAAM,CAACP,MAAMQ,QAAQ,GAAGZ,MAAMa,QAAQ;IACtC,MAAM,CAACP,MAAMQ,QAAQ,GAAGd,MAAMa,QAAQ;IACtC,MAAM,CAACN,YAAYQ,cAAc,GAAGf,MAAMa,QAAQ;IAElDX,UAAU;QACR,IAAIK,eAAeI,QAAQJ,UAAU,EAAE;YACrCK,QAAQD,QAAQP,IAAI;YACpBU,QAAQH,QAAQL,IAAI;YACpBS,cAAcJ,QAAQJ,UAAU;QAClC;IACF,GAAG;QAACA;QAAYI;KAAQ;IAExB,qBACE,KAACH,aAAaQ,QAAQ;QACpBC,OAAO;YACLb;YACAE;YACAC;QACF;kBAECG;;AAGP,EAAC"}